<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classccsds__ticp__frame__sink" kind="class" prot="public">
    <compoundname>ccsds_ticp_frame_sink</compoundname>
    <basecompoundref prot="public" virt="non-virtual">gr_block</basecompoundref>
    <includes refid="ccsds__ticp__frame__sink_8h" local="no">ccsds_ticp_frame_sink.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classccsds__ticp__frame__sink_1a2aa9f9481ef03c377114cdc49571ef88" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int ccsds_ticp_frame_sink::d_FRAME_LEN</definition>
        <argsstring></argsstring>
        <name>d_FRAME_LEN</name>
        <briefdescription>
<para>Length of a frame in bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="76" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classccsds__ticp__frame__sink_1a381e53bfec59675c57a72eed555ca796" prot="private" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t ccsds_ticp_frame_sink::d_DATA_TYPE</definition>
        <argsstring></argsstring>
        <name>d_DATA_TYPE</name>
        <briefdescription>
<para>Type of the dataset&apos;s data that should be used as PDU payload. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="79" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classccsds__ticp__frame__sink_1ab76d30e6b1565ee6d053e5913de52220" prot="private" static="no" mutable="no">
        <type>std::queue&lt; ticp::data_v2_t &gt;</type>
        <definition>std::queue&lt;ticp::data_v2_t&gt; ccsds_ticp_frame_sink::d_queue</definition>
        <argsstring></argsstring>
        <name>d_queue</name>
        <briefdescription>
<para>FIFO queue in which to buffer the frames. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="82" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classccsds__ticp__frame__sink_1af38bd0076a0ecfc248a45af1f116a1b2" prot="private" static="no" mutable="no">
        <type>boost::mutex</type>
        <definition>boost::mutex ccsds_ticp_frame_sink::d_mutex</definition>
        <argsstring></argsstring>
        <name>d_mutex</name>
        <briefdescription>
<para>Mutex to controll access to queue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="85" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classccsds__ticp__frame__sink_1aba3c8cb73caa98f3d38ba2ef137942ac" prot="private" static="no" mutable="no">
        <type>boost::condition_variable</type>
        <definition>boost::condition_variable ccsds_ticp_frame_sink::d_condition_var</definition>
        <argsstring></argsstring>
        <name>d_condition_var</name>
        <briefdescription>
<para>Condition variable to notify the consumer when there is new data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="88" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classccsds__ticp__frame__sink_1a8d7128b09a803d0a4a4d2f0156608056" prot="private" static="no" mutable="no">
        <type>boost::shared_ptr&lt; ticp::Server&lt; ticp::data_v2_t &gt; &gt;</type>
        <definition>boost::shared_ptr&lt; ticp::Server&lt;ticp::data_v2_t&gt; &gt; ccsds_ticp_frame_sink::d_ticp_sptr</definition>
        <argsstring></argsstring>
        <name>d_ticp_sptr</name>
        <briefdescription>
<para>Shared pointer to the TICP Server. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="91" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classccsds__ticp__frame__sink_1a6ce30b6dc1c691553f267084f673cf7e" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, uint8_t &gt;</type>
        <definition>std::map&lt;std::string, uint8_t&gt; ccsds_ticp_frame_sink::d_metadata_map</definition>
        <argsstring></argsstring>
        <name>d_metadata_map</name>
        <briefdescription>
<para>Map to store the metadata mapping in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="94" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classccsds__ticp__frame__sink_1af69f454898ab53c52a12297ff7916845" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long ccsds_ticp_frame_sink::d_frame_count</definition>
        <argsstring></argsstring>
        <name>d_frame_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="104" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classccsds__ticp__frame__sink_1a4b40602f9fb1d7b6dd9f34644faf98e8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend __GR_ATTR_IMPORT <ref refid="ccsds__ticp__frame__sink_8h_1a5c30533534844a0df5c6d783be77d66f" kindref="member">ccsds_ticp_frame_sink_sptr</ref></type>
        <definition>__GR_ATTR_IMPORT ccsds_ticp_frame_sink_sptr ccsds_make_ticp_frame_sink</definition>
        <argsstring>(unsigned int port, const unsigned int frame_length, const uint8_t data_type, std::vector&lt; std::string &gt; map_names, std::vector&lt; uint8_t &gt; map_types)</argsstring>
        <name>ccsds_make_ticp_frame_sink</name>
        <param>
          <type>unsigned int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>frame_length</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>data_type</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>map_names</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt;</type>
          <declname>map_types</declname>
        </param>
        <briefdescription>
<para>Return a shared_ptr to a new instance of <ref refid="classccsds__ticp__frame__sink" kindref="compound">ccsds_ticp_frame_sink</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Create an instance of <ref refid="classccsds__ticp__frame__sink" kindref="compound">ccsds_ticp_frame_sink</ref> and return it&apos;s shared_ptr.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port of the TicpServer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of a frame in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the dataset which&apos;s data should be used for the actuall output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_names</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of names from the PDU header that should be used. Can be empty. Must have the same length as map_types. All elements in this vector must be unique. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_types</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of datatypes that should be used when inserting metadata intp the TICP protocol. Can be empty. Must have the same length as map_names. All elements in this vector must be unique. * </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shared pointer to the created TICP frame sink. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="57" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classccsds__ticp__frame__sink_1a449b768f2381c19086e7a68326d3211e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ccsds_ticp_frame_sink::ccsds_ticp_frame_sink</definition>
        <argsstring>(unsigned int port, const unsigned int frame_length, const uint8_t data_type, std::vector&lt; std::string &gt; map_names, std::vector&lt; uint8_t &gt; map_types)</argsstring>
        <name>ccsds_ticp_frame_sink</name>
        <param>
          <type>unsigned int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>frame_length</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>data_type</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>map_names</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt;</type>
          <declname>map_types</declname>
        </param>
        <briefdescription>
<para>Private constructor of the TICP frame sink. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port of the TicpServer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of a frame in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the dataset which&apos;s data should be used for the actuall output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_names</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of names from the PDU header that should be used. Can be empty. Must have the same length as map_types. All elements in this vector must be unique. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_types</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of datatypes that should be used when inserting metadata intp the TICP protocol. Can be empty. Must have the same length as map_names. All elements in this vector must be unique. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classccsds__ticp__frame__sink_1a3b04cd162687449350be7bac6f248ff6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const ticp::data_v2_t</type>
        <definition>const ticp::data_v2_t ccsds_ticp_frame_sink::getFrame</definition>
        <argsstring>(void)</argsstring>
        <name>getFrame</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Pops a frame from the queue and send it to the client. Blocks until there is a frame in the queue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Frame from the queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classccsds__ticp__frame__sink_1aee0c7f14d96355c0cf47cee0af51c997" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ccsds_ticp_frame_sink::process_message</definition>
        <argsstring>(pmt::pmt_t msg_in)</argsstring>
        <name>process_message</name>
        <param>
          <type>pmt::pmt_t</type>
          <declname>msg_in</declname>
        </param>
        <briefdescription>
<para>Store incomming message into buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="114" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classccsds__ticp__frame__sink_1a001098d9ccdeba91f5362e2ae2131f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ccsds_ticp_frame_sink::~ccsds_ticp_frame_sink</definition>
        <argsstring>()</argsstring>
        <name>~ccsds_ticp_frame_sink</name>
        <briefdescription>
<para>Public deconstructor of the ticp frame sink. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="118" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reads frames from message input port &quot;in&quot; and outputs it to a TicpClient. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="151">
        <label>gr_block</label>
      </node>
      <node id="150">
        <label>ccsds_ticp_frame_sink</label>
        <link refid="classccsds__ticp__frame__sink"/>
        <childnode refid="151" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="153">
        <label>gr_block</label>
      </node>
      <node id="152">
        <label>ccsds_ticp_frame_sink</label>
        <link refid="classccsds__ticp__frame__sink"/>
        <childnode refid="153" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" line="55" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_ticp_frame_sink.h" bodystart="54" bodyend="120"/>
    <listofallmembers>
      <member refid="classccsds__ticp__frame__sink_1a4b40602f9fb1d7b6dd9f34644faf98e8" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>ccsds_make_ticp_frame_sink</name></member>
      <member refid="classccsds__ticp__frame__sink_1a449b768f2381c19086e7a68326d3211e" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>ccsds_ticp_frame_sink</name></member>
      <member refid="classccsds__ticp__frame__sink_1aba3c8cb73caa98f3d38ba2ef137942ac" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>d_condition_var</name></member>
      <member refid="classccsds__ticp__frame__sink_1a381e53bfec59675c57a72eed555ca796" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>d_DATA_TYPE</name></member>
      <member refid="classccsds__ticp__frame__sink_1af69f454898ab53c52a12297ff7916845" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>d_frame_count</name></member>
      <member refid="classccsds__ticp__frame__sink_1a2aa9f9481ef03c377114cdc49571ef88" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>d_FRAME_LEN</name></member>
      <member refid="classccsds__ticp__frame__sink_1a6ce30b6dc1c691553f267084f673cf7e" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>d_metadata_map</name></member>
      <member refid="classccsds__ticp__frame__sink_1af38bd0076a0ecfc248a45af1f116a1b2" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>d_mutex</name></member>
      <member refid="classccsds__ticp__frame__sink_1ab76d30e6b1565ee6d053e5913de52220" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>d_queue</name></member>
      <member refid="classccsds__ticp__frame__sink_1a8d7128b09a803d0a4a4d2f0156608056" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>d_ticp_sptr</name></member>
      <member refid="classccsds__ticp__frame__sink_1a3b04cd162687449350be7bac6f248ff6" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>getFrame</name></member>
      <member refid="classccsds__ticp__frame__sink_1aee0c7f14d96355c0cf47cee0af51c997" prot="private" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>process_message</name></member>
      <member refid="classccsds__ticp__frame__sink_1a001098d9ccdeba91f5362e2ae2131f56" prot="public" virt="non-virtual"><scope>ccsds_ticp_frame_sink</scope><name>~ccsds_ticp_frame_sink</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccsds_swig', [dirname(__file__)])
        except ImportError:
            import _ccsds_swig
            return _ccsds_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_ccsds_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ccsds_swig = swig_import_helper()
    del swig_import_helper
else:
    import _ccsds_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _ccsds_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _ccsds_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _ccsds_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _ccsds_swig.high_res_timer_epoch()
NONE = _ccsds_swig.NONE
ECSS_23 = _ccsds_swig.ECSS_23
ECSS_34 = _ccsds_swig.ECSS_34
ECSS_56 = _ccsds_swig.ECSS_56
ECSS_78 = _ccsds_swig.ECSS_78

def get_pattern_len(*args, **kwargs):
  """get_pattern_len(gr::ccsds::conv_puncturing27::punct_t const punct) -> unsigned int"""
  return _ccsds_swig.get_pattern_len(*args, **kwargs)

def get_pattern(*args, **kwargs):
  """get_pattern(gr::ccsds::conv_puncturing27::punct_t const punct) -> boost::shared_ptr< bool [] >"""
  return _ccsds_swig.get_pattern(*args, **kwargs)
class randomiser(object):
    """
    Combines the input frame with a pseudo random sequence by XOR operation. The pseudo random sequence is generated by an 8-bit linear feedback shift register as defined in ECSS.

    The block has an input message port named "in" at which new frames can arrive. On arrival a new message is created consisting of the input message XORed with the pseudo random sequence. The LFSR is set to the initial  state before every block.This new message is then queued in the output message port named "out".
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(uint8_t const polynomial, uint8_t const seed) -> randomiser_sptr

        Params: (polynomial, seed)
        """
        return _ccsds_swig.randomiser_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_randomiser
    __del__ = lambda self : None;
randomiser_swigregister = _ccsds_swig.randomiser_swigregister
randomiser_swigregister(randomiser)

def randomiser_make(*args, **kwargs):
  """
    randomiser_make(uint8_t const polynomial, uint8_t const seed) -> randomiser_sptr

    Params: (polynomial, seed)
    """
  return _ccsds_swig.randomiser_make(*args, **kwargs)

class randomiser_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::randomiser)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::randomiser)> self) -> randomiser_sptr
        __init__(boost::shared_ptr<(gr::ccsds::randomiser)> self, randomiser p) -> randomiser_sptr
        """
        this = _ccsds_swig.new_randomiser_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(randomiser_sptr self) -> randomiser"""
        return _ccsds_swig.randomiser_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_randomiser_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(randomiser_sptr self, uint8_t const polynomial, uint8_t const seed) -> randomiser_sptr

        Params: (polynomial, seed)
        """
        return _ccsds_swig.randomiser_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(randomiser_sptr self) -> unsigned int"""
        return _ccsds_swig.randomiser_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(randomiser_sptr self, int which, int delay)
        declare_sample_delay(randomiser_sptr self, unsigned int delay)
        """
        return _ccsds_swig.randomiser_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(randomiser_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.randomiser_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(randomiser_sptr self) -> double"""
        return _ccsds_swig.randomiser_sptr_relative_rate(self)

    def start(self):
        """start(randomiser_sptr self) -> bool"""
        return _ccsds_swig.randomiser_sptr_start(self)

    def stop(self):
        """stop(randomiser_sptr self) -> bool"""
        return _ccsds_swig.randomiser_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(randomiser_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.randomiser_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(randomiser_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.randomiser_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(randomiser_sptr self, int m)"""
        return _ccsds_swig.randomiser_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(randomiser_sptr self)"""
        return _ccsds_swig.randomiser_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(randomiser_sptr self) -> bool"""
        return _ccsds_swig.randomiser_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(randomiser_sptr self, int m)"""
        return _ccsds_swig.randomiser_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(randomiser_sptr self, int i) -> long"""
        return _ccsds_swig.randomiser_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(randomiser_sptr self, long max_output_buffer)
        set_max_output_buffer(randomiser_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.randomiser_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(randomiser_sptr self, int i) -> long"""
        return _ccsds_swig.randomiser_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(randomiser_sptr self, long min_output_buffer)
        set_min_output_buffer(randomiser_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.randomiser_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(randomiser_sptr self, int which) -> float
        pc_input_buffers_full(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(randomiser_sptr self, int which) -> float
        pc_input_buffers_full_avg(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(randomiser_sptr self, int which) -> float
        pc_input_buffers_full_var(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(randomiser_sptr self, int which) -> float
        pc_output_buffers_full(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(randomiser_sptr self, int which) -> float
        pc_output_buffers_full_avg(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(randomiser_sptr self, int which) -> float
        pc_output_buffers_full_var(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(randomiser_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.randomiser_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(randomiser_sptr self)"""
        return _ccsds_swig.randomiser_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(randomiser_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.randomiser_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(randomiser_sptr self, int priority) -> int"""
        return _ccsds_swig.randomiser_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(randomiser_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_sptr_name(self)

    def symbol_name(self):
        """symbol_name(randomiser_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(randomiser_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.randomiser_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(randomiser_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.randomiser_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(randomiser_sptr self) -> long"""
        return _ccsds_swig.randomiser_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(randomiser_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.randomiser_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(randomiser_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.randomiser_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(randomiser_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(randomiser_sptr self, std::string name)"""
        return _ccsds_swig.randomiser_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(randomiser_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.randomiser_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(randomiser_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(randomiser_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(randomiser_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_sptr_message_subscribers(self, *args, **kwargs)

randomiser_sptr_swigregister = _ccsds_swig.randomiser_sptr_swigregister
randomiser_sptr_swigregister(randomiser_sptr)

randomiser_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randomiser = randomiser.make;

class reversebits(object):
    """
    reverses bit order in selected bytes of the input message.

    The block has an input message port named "in" at which new frames can arrive. On arrival a new message is created consisting of the input message but were selected bytes have a reverse order. So if the byte started with MSB it will now start with the LSB. This new message is then queued in the output message port named "out".
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int const msg_length, std::vector< unsigned int,std::allocator< unsigned int > > const & reverse_indices) -> reversebits_sptr

        Params: (msg_length, reverse_indices)
        """
        return _ccsds_swig.reversebits_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_reversebits
    __del__ = lambda self : None;
reversebits_swigregister = _ccsds_swig.reversebits_swigregister
reversebits_swigregister(reversebits)

def reversebits_make(*args, **kwargs):
  """
    reversebits_make(unsigned int const msg_length, std::vector< unsigned int,std::allocator< unsigned int > > const & reverse_indices) -> reversebits_sptr

    Params: (msg_length, reverse_indices)
    """
  return _ccsds_swig.reversebits_make(*args, **kwargs)

class reversebits_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::reversebits)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::reversebits)> self) -> reversebits_sptr
        __init__(boost::shared_ptr<(gr::ccsds::reversebits)> self, reversebits p) -> reversebits_sptr
        """
        this = _ccsds_swig.new_reversebits_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(reversebits_sptr self) -> reversebits"""
        return _ccsds_swig.reversebits_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_reversebits_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(reversebits_sptr self, unsigned int const msg_length, std::vector< unsigned int,std::allocator< unsigned int > > const & reverse_indices) -> reversebits_sptr

        Params: (msg_length, reverse_indices)
        """
        return _ccsds_swig.reversebits_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(reversebits_sptr self) -> unsigned int"""
        return _ccsds_swig.reversebits_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(reversebits_sptr self, int which, int delay)
        declare_sample_delay(reversebits_sptr self, unsigned int delay)
        """
        return _ccsds_swig.reversebits_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(reversebits_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.reversebits_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(reversebits_sptr self) -> double"""
        return _ccsds_swig.reversebits_sptr_relative_rate(self)

    def start(self):
        """start(reversebits_sptr self) -> bool"""
        return _ccsds_swig.reversebits_sptr_start(self)

    def stop(self):
        """stop(reversebits_sptr self) -> bool"""
        return _ccsds_swig.reversebits_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(reversebits_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.reversebits_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(reversebits_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.reversebits_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(reversebits_sptr self, int m)"""
        return _ccsds_swig.reversebits_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(reversebits_sptr self)"""
        return _ccsds_swig.reversebits_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(reversebits_sptr self) -> bool"""
        return _ccsds_swig.reversebits_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(reversebits_sptr self, int m)"""
        return _ccsds_swig.reversebits_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(reversebits_sptr self, int i) -> long"""
        return _ccsds_swig.reversebits_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(reversebits_sptr self, long max_output_buffer)
        set_max_output_buffer(reversebits_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.reversebits_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(reversebits_sptr self, int i) -> long"""
        return _ccsds_swig.reversebits_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(reversebits_sptr self, long min_output_buffer)
        set_min_output_buffer(reversebits_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.reversebits_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(reversebits_sptr self, int which) -> float
        pc_input_buffers_full(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(reversebits_sptr self, int which) -> float
        pc_input_buffers_full_avg(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(reversebits_sptr self, int which) -> float
        pc_input_buffers_full_var(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(reversebits_sptr self, int which) -> float
        pc_output_buffers_full(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(reversebits_sptr self, int which) -> float
        pc_output_buffers_full_avg(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(reversebits_sptr self, int which) -> float
        pc_output_buffers_full_var(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(reversebits_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.reversebits_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(reversebits_sptr self)"""
        return _ccsds_swig.reversebits_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(reversebits_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.reversebits_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(reversebits_sptr self, int priority) -> int"""
        return _ccsds_swig.reversebits_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(reversebits_sptr self) -> std::string"""
        return _ccsds_swig.reversebits_sptr_name(self)

    def symbol_name(self):
        """symbol_name(reversebits_sptr self) -> std::string"""
        return _ccsds_swig.reversebits_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(reversebits_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.reversebits_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(reversebits_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.reversebits_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(reversebits_sptr self) -> long"""
        return _ccsds_swig.reversebits_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(reversebits_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.reversebits_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(reversebits_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.reversebits_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(reversebits_sptr self) -> std::string"""
        return _ccsds_swig.reversebits_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(reversebits_sptr self, std::string name)"""
        return _ccsds_swig.reversebits_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(reversebits_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.reversebits_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(reversebits_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.reversebits_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(reversebits_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.reversebits_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(reversebits_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.reversebits_sptr_message_subscribers(self, *args, **kwargs)

reversebits_sptr_swigregister = _ccsds_swig.reversebits_sptr_swigregister
reversebits_sptr_swigregister(reversebits_sptr)

reversebits_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
reversebits = reversebits.make;

class msg_null_src(object):
    """Defines a message out port that is never used. This block can be used to connect asynchronous blocks to the flowgraph and then pass in messages to them directly from the python code. This block should only be used in QA code."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> msg_null_src_sptr

        Params: (NONE)
        """
        return _ccsds_swig.msg_null_src_make()

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_msg_null_src
    __del__ = lambda self : None;
msg_null_src_swigregister = _ccsds_swig.msg_null_src_swigregister
msg_null_src_swigregister(msg_null_src)

def msg_null_src_make():
  """
    msg_null_src_make() -> msg_null_src_sptr

    Params: (NONE)
    """
  return _ccsds_swig.msg_null_src_make()

class msg_null_src_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::msg_null_src)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::msg_null_src)> self) -> msg_null_src_sptr
        __init__(boost::shared_ptr<(gr::ccsds::msg_null_src)> self, msg_null_src p) -> msg_null_src_sptr
        """
        this = _ccsds_swig.new_msg_null_src_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(msg_null_src_sptr self) -> msg_null_src"""
        return _ccsds_swig.msg_null_src_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_msg_null_src_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(msg_null_src_sptr self) -> msg_null_src_sptr

        Params: (NONE)
        """
        return _ccsds_swig.msg_null_src_sptr_make(self)

    def history(self):
        """history(msg_null_src_sptr self) -> unsigned int"""
        return _ccsds_swig.msg_null_src_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(msg_null_src_sptr self, int which, int delay)
        declare_sample_delay(msg_null_src_sptr self, unsigned int delay)
        """
        return _ccsds_swig.msg_null_src_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(msg_null_src_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.msg_null_src_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(msg_null_src_sptr self) -> double"""
        return _ccsds_swig.msg_null_src_sptr_relative_rate(self)

    def start(self):
        """start(msg_null_src_sptr self) -> bool"""
        return _ccsds_swig.msg_null_src_sptr_start(self)

    def stop(self):
        """stop(msg_null_src_sptr self) -> bool"""
        return _ccsds_swig.msg_null_src_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(msg_null_src_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.msg_null_src_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(msg_null_src_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.msg_null_src_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(msg_null_src_sptr self, int m)"""
        return _ccsds_swig.msg_null_src_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(msg_null_src_sptr self)"""
        return _ccsds_swig.msg_null_src_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(msg_null_src_sptr self) -> bool"""
        return _ccsds_swig.msg_null_src_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(msg_null_src_sptr self, int m)"""
        return _ccsds_swig.msg_null_src_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(msg_null_src_sptr self, int i) -> long"""
        return _ccsds_swig.msg_null_src_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(msg_null_src_sptr self, long max_output_buffer)
        set_max_output_buffer(msg_null_src_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.msg_null_src_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(msg_null_src_sptr self, int i) -> long"""
        return _ccsds_swig.msg_null_src_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(msg_null_src_sptr self, long min_output_buffer)
        set_min_output_buffer(msg_null_src_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.msg_null_src_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(msg_null_src_sptr self, int which) -> float
        pc_input_buffers_full(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(msg_null_src_sptr self, int which) -> float
        pc_input_buffers_full_avg(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(msg_null_src_sptr self, int which) -> float
        pc_input_buffers_full_var(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(msg_null_src_sptr self, int which) -> float
        pc_output_buffers_full(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(msg_null_src_sptr self, int which) -> float
        pc_output_buffers_full_avg(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(msg_null_src_sptr self, int which) -> float
        pc_output_buffers_full_var(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(msg_null_src_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.msg_null_src_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(msg_null_src_sptr self)"""
        return _ccsds_swig.msg_null_src_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(msg_null_src_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.msg_null_src_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(msg_null_src_sptr self, int priority) -> int"""
        return _ccsds_swig.msg_null_src_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(msg_null_src_sptr self) -> std::string"""
        return _ccsds_swig.msg_null_src_sptr_name(self)

    def symbol_name(self):
        """symbol_name(msg_null_src_sptr self) -> std::string"""
        return _ccsds_swig.msg_null_src_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(msg_null_src_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.msg_null_src_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(msg_null_src_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.msg_null_src_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(msg_null_src_sptr self) -> long"""
        return _ccsds_swig.msg_null_src_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(msg_null_src_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.msg_null_src_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(msg_null_src_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.msg_null_src_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(msg_null_src_sptr self) -> std::string"""
        return _ccsds_swig.msg_null_src_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(msg_null_src_sptr self, std::string name)"""
        return _ccsds_swig.msg_null_src_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(msg_null_src_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.msg_null_src_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(msg_null_src_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.msg_null_src_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(msg_null_src_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.msg_null_src_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(msg_null_src_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.msg_null_src_sptr_message_subscribers(self, *args, **kwargs)

msg_null_src_sptr_swigregister = _ccsds_swig.msg_null_src_sptr_swigregister
msg_null_src_sptr_swigregister(msg_null_src_sptr)

msg_null_src_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
msg_null_src = msg_null_src.make;

class add_asm(object):
    """
    Takes a frame and adds a sync marker in front of it.

    The block has an input message port named "in" at which new frames can arrive. On arrival a new message is created consisting of the ASM sequence followed by the data of the incomming message. This new message is then queued in the output message port named "out".
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::string ASM, unsigned int const frame_len) -> add_asm_sptr

        Params: (ASM, frame_len)
        """
        return _ccsds_swig.add_asm_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_add_asm
    __del__ = lambda self : None;
add_asm_swigregister = _ccsds_swig.add_asm_swigregister
add_asm_swigregister(add_asm)

def add_asm_make(*args, **kwargs):
  """
    add_asm_make(std::string ASM, unsigned int const frame_len) -> add_asm_sptr

    Params: (ASM, frame_len)
    """
  return _ccsds_swig.add_asm_make(*args, **kwargs)

class add_asm_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::add_asm)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::add_asm)> self) -> add_asm_sptr
        __init__(boost::shared_ptr<(gr::ccsds::add_asm)> self, add_asm p) -> add_asm_sptr
        """
        this = _ccsds_swig.new_add_asm_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_asm_sptr self) -> add_asm"""
        return _ccsds_swig.add_asm_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_add_asm_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_asm_sptr self, std::string ASM, unsigned int const frame_len) -> add_asm_sptr

        Params: (ASM, frame_len)
        """
        return _ccsds_swig.add_asm_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(add_asm_sptr self) -> unsigned int"""
        return _ccsds_swig.add_asm_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_asm_sptr self, int which, int delay)
        declare_sample_delay(add_asm_sptr self, unsigned int delay)
        """
        return _ccsds_swig.add_asm_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_asm_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.add_asm_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_asm_sptr self) -> double"""
        return _ccsds_swig.add_asm_sptr_relative_rate(self)

    def start(self):
        """start(add_asm_sptr self) -> bool"""
        return _ccsds_swig.add_asm_sptr_start(self)

    def stop(self):
        """stop(add_asm_sptr self) -> bool"""
        return _ccsds_swig.add_asm_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_asm_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.add_asm_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_asm_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.add_asm_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_asm_sptr self, int m)"""
        return _ccsds_swig.add_asm_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_asm_sptr self)"""
        return _ccsds_swig.add_asm_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_asm_sptr self) -> bool"""
        return _ccsds_swig.add_asm_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_asm_sptr self, int m)"""
        return _ccsds_swig.add_asm_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_asm_sptr self, int i) -> long"""
        return _ccsds_swig.add_asm_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_asm_sptr self, long max_output_buffer)
        set_max_output_buffer(add_asm_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.add_asm_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_asm_sptr self, int i) -> long"""
        return _ccsds_swig.add_asm_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_asm_sptr self, long min_output_buffer)
        set_min_output_buffer(add_asm_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.add_asm_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_asm_sptr self, int which) -> float
        pc_input_buffers_full(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_asm_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_asm_sptr self, int which) -> float
        pc_input_buffers_full_var(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_asm_sptr self, int which) -> float
        pc_output_buffers_full(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_asm_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_asm_sptr self, int which) -> float
        pc_output_buffers_full_var(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_asm_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.add_asm_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_asm_sptr self)"""
        return _ccsds_swig.add_asm_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_asm_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.add_asm_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_asm_sptr self, int priority) -> int"""
        return _ccsds_swig.add_asm_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_asm_sptr self) -> std::string"""
        return _ccsds_swig.add_asm_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_asm_sptr self) -> std::string"""
        return _ccsds_swig.add_asm_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_asm_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.add_asm_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_asm_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.add_asm_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_asm_sptr self) -> long"""
        return _ccsds_swig.add_asm_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_asm_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.add_asm_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_asm_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.add_asm_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_asm_sptr self) -> std::string"""
        return _ccsds_swig.add_asm_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_asm_sptr self, std::string name)"""
        return _ccsds_swig.add_asm_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_asm_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.add_asm_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_asm_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.add_asm_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_asm_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.add_asm_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_asm_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.add_asm_sptr_message_subscribers(self, *args, **kwargs)

add_asm_sptr_swigregister = _ccsds_swig.add_asm_sptr_swigregister
add_asm_sptr_swigregister(add_asm_sptr)

add_asm_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_asm = add_asm.make;

class ticp_frame_source(object):
    """Reads frames from a TicpServer and outputs it as a stream."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(self, *args, **kwargs):
        """
        make(ticp_frame_source self, std::string hostname, unsigned int port, unsigned int const frame_length, uint8_t const data_type, 
            std::vector< std::string,std::allocator< std::string > > map_names, 
            std::vector< uint8_t,std::allocator< uint8_t > > map_types, double const frame_rate=0.0) -> ticp_frame_source_sptr

        Params: (hostname, port, frame_length, data_type, map_names, map_types, frame_rate)
        """
        return _ccsds_swig.ticp_frame_source_make(self, *args, **kwargs)

    __swig_destroy__ = _ccsds_swig.delete_ticp_frame_source
    __del__ = lambda self : None;
ticp_frame_source_swigregister = _ccsds_swig.ticp_frame_source_swigregister
ticp_frame_source_swigregister(ticp_frame_source)

class ticp_frame_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::ticp_frame_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::ticp_frame_source)> self) -> ticp_frame_source_sptr
        __init__(boost::shared_ptr<(gr::ccsds::ticp_frame_source)> self, ticp_frame_source p) -> ticp_frame_source_sptr
        """
        this = _ccsds_swig.new_ticp_frame_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ticp_frame_source_sptr self) -> ticp_frame_source"""
        return _ccsds_swig.ticp_frame_source_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_ticp_frame_source_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(ticp_frame_source_sptr self, std::string hostname, unsigned int port, unsigned int const frame_length, uint8_t const data_type, 
            std::vector< std::string,std::allocator< std::string > > map_names, 
            std::vector< uint8_t,std::allocator< uint8_t > > map_types, double const frame_rate=0.0) -> ticp_frame_source_sptr

        Params: (hostname, port, frame_length, data_type, map_names, map_types, frame_rate)
        """
        return _ccsds_swig.ticp_frame_source_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(ticp_frame_source_sptr self) -> unsigned int"""
        return _ccsds_swig.ticp_frame_source_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ticp_frame_source_sptr self, int which, int delay)
        declare_sample_delay(ticp_frame_source_sptr self, unsigned int delay)
        """
        return _ccsds_swig.ticp_frame_source_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ticp_frame_source_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.ticp_frame_source_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ticp_frame_source_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ticp_frame_source_sptr self) -> double"""
        return _ccsds_swig.ticp_frame_source_sptr_relative_rate(self)

    def start(self):
        """start(ticp_frame_source_sptr self) -> bool"""
        return _ccsds_swig.ticp_frame_source_sptr_start(self)

    def stop(self):
        """stop(ticp_frame_source_sptr self) -> bool"""
        return _ccsds_swig.ticp_frame_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ticp_frame_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.ticp_frame_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ticp_frame_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.ticp_frame_source_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ticp_frame_source_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_source_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ticp_frame_source_sptr self, int m)"""
        return _ccsds_swig.ticp_frame_source_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ticp_frame_source_sptr self)"""
        return _ccsds_swig.ticp_frame_source_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ticp_frame_source_sptr self) -> bool"""
        return _ccsds_swig.ticp_frame_source_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ticp_frame_source_sptr self, int m)"""
        return _ccsds_swig.ticp_frame_source_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ticp_frame_source_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_source_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ticp_frame_source_sptr self, int i) -> long"""
        return _ccsds_swig.ticp_frame_source_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ticp_frame_source_sptr self, long max_output_buffer)
        set_max_output_buffer(ticp_frame_source_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.ticp_frame_source_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ticp_frame_source_sptr self, int i) -> long"""
        return _ccsds_swig.ticp_frame_source_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ticp_frame_source_sptr self, long min_output_buffer)
        set_min_output_buffer(ticp_frame_source_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.ticp_frame_source_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ticp_frame_source_sptr self, int which) -> float
        pc_input_buffers_full(ticp_frame_source_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_source_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ticp_frame_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(ticp_frame_source_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_source_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ticp_frame_source_sptr self, int which) -> float
        pc_input_buffers_full_var(ticp_frame_source_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_source_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ticp_frame_source_sptr self, int which) -> float
        pc_output_buffers_full(ticp_frame_source_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_source_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ticp_frame_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(ticp_frame_source_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_source_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ticp_frame_source_sptr self, int which) -> float
        pc_output_buffers_full_var(ticp_frame_source_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_source_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(ticp_frame_source_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_source_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ticp_frame_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.ticp_frame_source_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ticp_frame_source_sptr self)"""
        return _ccsds_swig.ticp_frame_source_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ticp_frame_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.ticp_frame_source_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ticp_frame_source_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_source_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ticp_frame_source_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_source_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ticp_frame_source_sptr self, int priority) -> int"""
        return _ccsds_swig.ticp_frame_source_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ticp_frame_source_sptr self) -> std::string"""
        return _ccsds_swig.ticp_frame_source_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ticp_frame_source_sptr self) -> std::string"""
        return _ccsds_swig.ticp_frame_source_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ticp_frame_source_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ticp_frame_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ticp_frame_source_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ticp_frame_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ticp_frame_source_sptr self) -> long"""
        return _ccsds_swig.ticp_frame_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ticp_frame_source_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.ticp_frame_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ticp_frame_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.ticp_frame_source_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ticp_frame_source_sptr self) -> std::string"""
        return _ccsds_swig.ticp_frame_source_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ticp_frame_source_sptr self, std::string name)"""
        return _ccsds_swig.ticp_frame_source_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ticp_frame_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.ticp_frame_source_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ticp_frame_source_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ticp_frame_source_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ticp_frame_source_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ticp_frame_source_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ticp_frame_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.ticp_frame_source_sptr_message_subscribers(self, *args, **kwargs)

ticp_frame_source_sptr_swigregister = _ccsds_swig.ticp_frame_source_sptr_swigregister
ticp_frame_source_sptr_swigregister(ticp_frame_source_sptr)

ticp_frame_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ticp_frame_source = ticp_frame_source.make;

class ticp_frame_sink(object):
    """Proxy of C++ gr::ccsds::ticp_frame_sink class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int port, unsigned int const frame_length, uint8_t const data_type, std::vector< std::string,std::allocator< std::string > > map_names, 
            std::vector< uint8_t,std::allocator< uint8_t > > map_types) -> ticp_frame_sink_sptr

        Params: (port, frame_length, data_type, map_names, map_types)
        """
        return _ccsds_swig.ticp_frame_sink_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_ticp_frame_sink
    __del__ = lambda self : None;
ticp_frame_sink_swigregister = _ccsds_swig.ticp_frame_sink_swigregister
ticp_frame_sink_swigregister(ticp_frame_sink)

def ticp_frame_sink_make(*args, **kwargs):
  """
    ticp_frame_sink_make(unsigned int port, unsigned int const frame_length, uint8_t const data_type, std::vector< std::string,std::allocator< std::string > > map_names, 
        std::vector< uint8_t,std::allocator< uint8_t > > map_types) -> ticp_frame_sink_sptr

    Params: (port, frame_length, data_type, map_names, map_types)
    """
  return _ccsds_swig.ticp_frame_sink_make(*args, **kwargs)

class ticp_frame_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::ticp_frame_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::ticp_frame_sink)> self) -> ticp_frame_sink_sptr
        __init__(boost::shared_ptr<(gr::ccsds::ticp_frame_sink)> self, ticp_frame_sink p) -> ticp_frame_sink_sptr
        """
        this = _ccsds_swig.new_ticp_frame_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ticp_frame_sink_sptr self) -> ticp_frame_sink"""
        return _ccsds_swig.ticp_frame_sink_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_ticp_frame_sink_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(ticp_frame_sink_sptr self, unsigned int port, unsigned int const frame_length, uint8_t const data_type, std::vector< std::string,std::allocator< std::string > > map_names, 
            std::vector< uint8_t,std::allocator< uint8_t > > map_types) -> ticp_frame_sink_sptr

        Params: (port, frame_length, data_type, map_names, map_types)
        """
        return _ccsds_swig.ticp_frame_sink_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(ticp_frame_sink_sptr self) -> unsigned int"""
        return _ccsds_swig.ticp_frame_sink_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ticp_frame_sink_sptr self, int which, int delay)
        declare_sample_delay(ticp_frame_sink_sptr self, unsigned int delay)
        """
        return _ccsds_swig.ticp_frame_sink_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ticp_frame_sink_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.ticp_frame_sink_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ticp_frame_sink_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ticp_frame_sink_sptr self) -> double"""
        return _ccsds_swig.ticp_frame_sink_sptr_relative_rate(self)

    def start(self):
        """start(ticp_frame_sink_sptr self) -> bool"""
        return _ccsds_swig.ticp_frame_sink_sptr_start(self)

    def stop(self):
        """stop(ticp_frame_sink_sptr self) -> bool"""
        return _ccsds_swig.ticp_frame_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ticp_frame_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.ticp_frame_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ticp_frame_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.ticp_frame_sink_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ticp_frame_sink_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_sink_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ticp_frame_sink_sptr self, int m)"""
        return _ccsds_swig.ticp_frame_sink_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ticp_frame_sink_sptr self)"""
        return _ccsds_swig.ticp_frame_sink_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ticp_frame_sink_sptr self) -> bool"""
        return _ccsds_swig.ticp_frame_sink_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ticp_frame_sink_sptr self, int m)"""
        return _ccsds_swig.ticp_frame_sink_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ticp_frame_sink_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_sink_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ticp_frame_sink_sptr self, int i) -> long"""
        return _ccsds_swig.ticp_frame_sink_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ticp_frame_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(ticp_frame_sink_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.ticp_frame_sink_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ticp_frame_sink_sptr self, int i) -> long"""
        return _ccsds_swig.ticp_frame_sink_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ticp_frame_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(ticp_frame_sink_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.ticp_frame_sink_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ticp_frame_sink_sptr self, int which) -> float
        pc_input_buffers_full(ticp_frame_sink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_sink_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ticp_frame_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(ticp_frame_sink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_sink_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ticp_frame_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(ticp_frame_sink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_sink_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ticp_frame_sink_sptr self, int which) -> float
        pc_output_buffers_full(ticp_frame_sink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_sink_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ticp_frame_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(ticp_frame_sink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_sink_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ticp_frame_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(ticp_frame_sink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ticp_frame_sink_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(ticp_frame_sink_sptr self) -> float"""
        return _ccsds_swig.ticp_frame_sink_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ticp_frame_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.ticp_frame_sink_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ticp_frame_sink_sptr self)"""
        return _ccsds_swig.ticp_frame_sink_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ticp_frame_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.ticp_frame_sink_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ticp_frame_sink_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_sink_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ticp_frame_sink_sptr self) -> int"""
        return _ccsds_swig.ticp_frame_sink_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ticp_frame_sink_sptr self, int priority) -> int"""
        return _ccsds_swig.ticp_frame_sink_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ticp_frame_sink_sptr self) -> std::string"""
        return _ccsds_swig.ticp_frame_sink_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ticp_frame_sink_sptr self) -> std::string"""
        return _ccsds_swig.ticp_frame_sink_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ticp_frame_sink_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ticp_frame_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ticp_frame_sink_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ticp_frame_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ticp_frame_sink_sptr self) -> long"""
        return _ccsds_swig.ticp_frame_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ticp_frame_sink_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.ticp_frame_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ticp_frame_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.ticp_frame_sink_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ticp_frame_sink_sptr self) -> std::string"""
        return _ccsds_swig.ticp_frame_sink_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ticp_frame_sink_sptr self, std::string name)"""
        return _ccsds_swig.ticp_frame_sink_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ticp_frame_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.ticp_frame_sink_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ticp_frame_sink_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ticp_frame_sink_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ticp_frame_sink_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ticp_frame_sink_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ticp_frame_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.ticp_frame_sink_sptr_message_subscribers(self, *args, **kwargs)

ticp_frame_sink_sptr_swigregister = _ccsds_swig.ticp_frame_sink_sptr_swigregister
ticp_frame_sink_sptr_swigregister(ticp_frame_sink_sptr)

ticp_frame_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ticp_frame_sink = ticp_frame_sink.make;

class trunk_tail(object):
    """
    Takes a frame and trunkates a number of bits from the end.

    The block has an input message port named "in" at which new frames can arrive. The message is trunkated then queued in the output message port named "out".
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int const trunc_len, unsigned int const frame_len, unsigned int const blanc_bits) -> trunk_tail_sptr

        Params: (trunc_len, frame_len, blanc_bits)
        """
        return _ccsds_swig.trunk_tail_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_trunk_tail
    __del__ = lambda self : None;
trunk_tail_swigregister = _ccsds_swig.trunk_tail_swigregister
trunk_tail_swigregister(trunk_tail)

def trunk_tail_make(*args, **kwargs):
  """
    trunk_tail_make(unsigned int const trunc_len, unsigned int const frame_len, unsigned int const blanc_bits) -> trunk_tail_sptr

    Params: (trunc_len, frame_len, blanc_bits)
    """
  return _ccsds_swig.trunk_tail_make(*args, **kwargs)

class trunk_tail_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::trunk_tail)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::trunk_tail)> self) -> trunk_tail_sptr
        __init__(boost::shared_ptr<(gr::ccsds::trunk_tail)> self, trunk_tail p) -> trunk_tail_sptr
        """
        this = _ccsds_swig.new_trunk_tail_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(trunk_tail_sptr self) -> trunk_tail"""
        return _ccsds_swig.trunk_tail_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_trunk_tail_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(trunk_tail_sptr self, unsigned int const trunc_len, unsigned int const frame_len, unsigned int const blanc_bits) -> trunk_tail_sptr

        Params: (trunc_len, frame_len, blanc_bits)
        """
        return _ccsds_swig.trunk_tail_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(trunk_tail_sptr self) -> unsigned int"""
        return _ccsds_swig.trunk_tail_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(trunk_tail_sptr self, int which, int delay)
        declare_sample_delay(trunk_tail_sptr self, unsigned int delay)
        """
        return _ccsds_swig.trunk_tail_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(trunk_tail_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.trunk_tail_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(trunk_tail_sptr self) -> double"""
        return _ccsds_swig.trunk_tail_sptr_relative_rate(self)

    def start(self):
        """start(trunk_tail_sptr self) -> bool"""
        return _ccsds_swig.trunk_tail_sptr_start(self)

    def stop(self):
        """stop(trunk_tail_sptr self) -> bool"""
        return _ccsds_swig.trunk_tail_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(trunk_tail_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.trunk_tail_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(trunk_tail_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.trunk_tail_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(trunk_tail_sptr self, int m)"""
        return _ccsds_swig.trunk_tail_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(trunk_tail_sptr self)"""
        return _ccsds_swig.trunk_tail_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(trunk_tail_sptr self) -> bool"""
        return _ccsds_swig.trunk_tail_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(trunk_tail_sptr self, int m)"""
        return _ccsds_swig.trunk_tail_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(trunk_tail_sptr self, int i) -> long"""
        return _ccsds_swig.trunk_tail_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(trunk_tail_sptr self, long max_output_buffer)
        set_max_output_buffer(trunk_tail_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.trunk_tail_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(trunk_tail_sptr self, int i) -> long"""
        return _ccsds_swig.trunk_tail_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(trunk_tail_sptr self, long min_output_buffer)
        set_min_output_buffer(trunk_tail_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.trunk_tail_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(trunk_tail_sptr self, int which) -> float
        pc_input_buffers_full(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(trunk_tail_sptr self, int which) -> float
        pc_input_buffers_full_avg(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(trunk_tail_sptr self, int which) -> float
        pc_input_buffers_full_var(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(trunk_tail_sptr self, int which) -> float
        pc_output_buffers_full(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(trunk_tail_sptr self, int which) -> float
        pc_output_buffers_full_avg(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(trunk_tail_sptr self, int which) -> float
        pc_output_buffers_full_var(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(trunk_tail_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.trunk_tail_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(trunk_tail_sptr self)"""
        return _ccsds_swig.trunk_tail_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(trunk_tail_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.trunk_tail_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(trunk_tail_sptr self, int priority) -> int"""
        return _ccsds_swig.trunk_tail_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(trunk_tail_sptr self) -> std::string"""
        return _ccsds_swig.trunk_tail_sptr_name(self)

    def symbol_name(self):
        """symbol_name(trunk_tail_sptr self) -> std::string"""
        return _ccsds_swig.trunk_tail_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(trunk_tail_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.trunk_tail_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(trunk_tail_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.trunk_tail_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(trunk_tail_sptr self) -> long"""
        return _ccsds_swig.trunk_tail_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(trunk_tail_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.trunk_tail_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(trunk_tail_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.trunk_tail_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(trunk_tail_sptr self) -> std::string"""
        return _ccsds_swig.trunk_tail_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(trunk_tail_sptr self, std::string name)"""
        return _ccsds_swig.trunk_tail_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(trunk_tail_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.trunk_tail_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(trunk_tail_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.trunk_tail_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(trunk_tail_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.trunk_tail_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(trunk_tail_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.trunk_tail_sptr_message_subscribers(self, *args, **kwargs)

trunk_tail_sptr_swigregister = _ccsds_swig.trunk_tail_sptr_swigregister
trunk_tail_sptr_swigregister(trunk_tail_sptr)

trunk_tail_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
trunk_tail = trunk_tail.make;

class pll_cc(object):
    """
    Phase locked loop that sends frequency correction messages.

    Phase locked loop using the Viterbi&Viterbi method to estimate the sample's phase offset. Estimates are filtered with a linear second order low pass filter.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int m, float loop_bandwidth) -> pll_cc_sptr

        Params: (m, loop_bandwidth)
        """
        return _ccsds_swig.pll_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_pll_cc
    __del__ = lambda self : None;
pll_cc_swigregister = _ccsds_swig.pll_cc_swigregister
pll_cc_swigregister(pll_cc)

def pll_cc_make(*args, **kwargs):
  """
    pll_cc_make(unsigned int m, float loop_bandwidth) -> pll_cc_sptr

    Params: (m, loop_bandwidth)
    """
  return _ccsds_swig.pll_cc_make(*args, **kwargs)

class pll_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::pll_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::pll_cc)> self) -> pll_cc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::pll_cc)> self, pll_cc p) -> pll_cc_sptr
        """
        this = _ccsds_swig.new_pll_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pll_cc_sptr self) -> pll_cc"""
        return _ccsds_swig.pll_cc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_pll_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pll_cc_sptr self, unsigned int m, float loop_bandwidth) -> pll_cc_sptr

        Params: (m, loop_bandwidth)
        """
        return _ccsds_swig.pll_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pll_cc_sptr self) -> unsigned int"""
        return _ccsds_swig.pll_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pll_cc_sptr self, int which, int delay)
        declare_sample_delay(pll_cc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.pll_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pll_cc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.pll_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pll_cc_sptr self) -> double"""
        return _ccsds_swig.pll_cc_sptr_relative_rate(self)

    def start(self):
        """start(pll_cc_sptr self) -> bool"""
        return _ccsds_swig.pll_cc_sptr_start(self)

    def stop(self):
        """stop(pll_cc_sptr self) -> bool"""
        return _ccsds_swig.pll_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pll_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.pll_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pll_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.pll_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pll_cc_sptr self, int m)"""
        return _ccsds_swig.pll_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pll_cc_sptr self)"""
        return _ccsds_swig.pll_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pll_cc_sptr self) -> bool"""
        return _ccsds_swig.pll_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pll_cc_sptr self, int m)"""
        return _ccsds_swig.pll_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pll_cc_sptr self, int i) -> long"""
        return _ccsds_swig.pll_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pll_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(pll_cc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.pll_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pll_cc_sptr self, int i) -> long"""
        return _ccsds_swig.pll_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pll_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(pll_cc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.pll_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pll_cc_sptr self, int which) -> float
        pc_input_buffers_full(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pll_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pll_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pll_cc_sptr self, int which) -> float
        pc_output_buffers_full(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pll_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pll_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pll_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.pll_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pll_cc_sptr self)"""
        return _ccsds_swig.pll_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pll_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.pll_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pll_cc_sptr self, int priority) -> int"""
        return _ccsds_swig.pll_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pll_cc_sptr self) -> std::string"""
        return _ccsds_swig.pll_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pll_cc_sptr self) -> std::string"""
        return _ccsds_swig.pll_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pll_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.pll_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pll_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.pll_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pll_cc_sptr self) -> long"""
        return _ccsds_swig.pll_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pll_cc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.pll_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pll_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.pll_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pll_cc_sptr self) -> std::string"""
        return _ccsds_swig.pll_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pll_cc_sptr self, std::string name)"""
        return _ccsds_swig.pll_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pll_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.pll_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pll_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.pll_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pll_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.pll_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pll_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.pll_cc_sptr_message_subscribers(self, *args, **kwargs)

pll_cc_sptr_swigregister = _ccsds_swig.pll_cc_sptr_swigregister
pll_cc_sptr_swigregister(pll_cc_sptr)

pll_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pll_cc = pll_cc.make;

class dll_cc(object):
    """
    Delay locked loop decimating from sample- to symbolrate

    Delay estimation based on the Gardner passband timing error detector. The synchronous samples are obtained by cubic interpolation.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int osf, float gamma) -> dll_cc_sptr

        Params: (osf, gamma)
        """
        return _ccsds_swig.dll_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_dll_cc
    __del__ = lambda self : None;
dll_cc_swigregister = _ccsds_swig.dll_cc_swigregister
dll_cc_swigregister(dll_cc)

def dll_cc_make(*args, **kwargs):
  """
    dll_cc_make(unsigned int osf, float gamma) -> dll_cc_sptr

    Params: (osf, gamma)
    """
  return _ccsds_swig.dll_cc_make(*args, **kwargs)

class dll_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::dll_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::dll_cc)> self) -> dll_cc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::dll_cc)> self, dll_cc p) -> dll_cc_sptr
        """
        this = _ccsds_swig.new_dll_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dll_cc_sptr self) -> dll_cc"""
        return _ccsds_swig.dll_cc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_dll_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(dll_cc_sptr self, unsigned int osf, float gamma) -> dll_cc_sptr

        Params: (osf, gamma)
        """
        return _ccsds_swig.dll_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(dll_cc_sptr self) -> unsigned int"""
        return _ccsds_swig.dll_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dll_cc_sptr self, int which, int delay)
        declare_sample_delay(dll_cc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.dll_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(dll_cc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.dll_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(dll_cc_sptr self) -> double"""
        return _ccsds_swig.dll_cc_sptr_relative_rate(self)

    def start(self):
        """start(dll_cc_sptr self) -> bool"""
        return _ccsds_swig.dll_cc_sptr_start(self)

    def stop(self):
        """stop(dll_cc_sptr self) -> bool"""
        return _ccsds_swig.dll_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(dll_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.dll_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(dll_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.dll_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(dll_cc_sptr self, int m)"""
        return _ccsds_swig.dll_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dll_cc_sptr self)"""
        return _ccsds_swig.dll_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dll_cc_sptr self) -> bool"""
        return _ccsds_swig.dll_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(dll_cc_sptr self, int m)"""
        return _ccsds_swig.dll_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(dll_cc_sptr self, int i) -> long"""
        return _ccsds_swig.dll_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dll_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(dll_cc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.dll_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(dll_cc_sptr self, int i) -> long"""
        return _ccsds_swig.dll_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dll_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(dll_cc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.dll_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dll_cc_sptr self, int which) -> float
        pc_input_buffers_full(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dll_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dll_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dll_cc_sptr self, int which) -> float
        pc_output_buffers_full(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dll_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dll_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(dll_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.dll_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(dll_cc_sptr self)"""
        return _ccsds_swig.dll_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(dll_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.dll_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(dll_cc_sptr self, int priority) -> int"""
        return _ccsds_swig.dll_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(dll_cc_sptr self) -> std::string"""
        return _ccsds_swig.dll_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(dll_cc_sptr self) -> std::string"""
        return _ccsds_swig.dll_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(dll_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.dll_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(dll_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.dll_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(dll_cc_sptr self) -> long"""
        return _ccsds_swig.dll_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(dll_cc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.dll_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(dll_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.dll_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(dll_cc_sptr self) -> std::string"""
        return _ccsds_swig.dll_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(dll_cc_sptr self, std::string name)"""
        return _ccsds_swig.dll_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(dll_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.dll_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(dll_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.dll_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(dll_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.dll_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(dll_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.dll_cc_sptr_message_subscribers(self, *args, **kwargs)

dll_cc_sptr_swigregister = _ccsds_swig.dll_cc_sptr_swigregister
dll_cc_sptr_swigregister(dll_cc_sptr)

dll_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dll_cc = dll_cc.make;

class blob_msg_sink_b(object):
    """Reads frames from message input port "in" and outputs it to a TicpClient."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int const blob_len) -> blob_msg_sink_b_sptr

        Params: (blob_len)
        """
        return _ccsds_swig.blob_msg_sink_b_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_blob_msg_sink_b
    __del__ = lambda self : None;
blob_msg_sink_b_swigregister = _ccsds_swig.blob_msg_sink_b_swigregister
blob_msg_sink_b_swigregister(blob_msg_sink_b)

def blob_msg_sink_b_make(*args, **kwargs):
  """
    blob_msg_sink_b_make(unsigned int const blob_len) -> blob_msg_sink_b_sptr

    Params: (blob_len)
    """
  return _ccsds_swig.blob_msg_sink_b_make(*args, **kwargs)

class blob_msg_sink_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::blob_msg_sink_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::blob_msg_sink_b)> self) -> blob_msg_sink_b_sptr
        __init__(boost::shared_ptr<(gr::ccsds::blob_msg_sink_b)> self, blob_msg_sink_b p) -> blob_msg_sink_b_sptr
        """
        this = _ccsds_swig.new_blob_msg_sink_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(blob_msg_sink_b_sptr self) -> blob_msg_sink_b"""
        return _ccsds_swig.blob_msg_sink_b_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_blob_msg_sink_b_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(blob_msg_sink_b_sptr self, unsigned int const blob_len) -> blob_msg_sink_b_sptr

        Params: (blob_len)
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(blob_msg_sink_b_sptr self) -> unsigned int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(blob_msg_sink_b_sptr self, int which, int delay)
        declare_sample_delay(blob_msg_sink_b_sptr self, unsigned int delay)
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(blob_msg_sink_b_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(blob_msg_sink_b_sptr self) -> double"""
        return _ccsds_swig.blob_msg_sink_b_sptr_relative_rate(self)

    def start(self):
        """start(blob_msg_sink_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_sink_b_sptr_start(self)

    def stop(self):
        """stop(blob_msg_sink_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_sink_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(blob_msg_sink_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.blob_msg_sink_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(blob_msg_sink_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.blob_msg_sink_b_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(blob_msg_sink_b_sptr self, int m)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(blob_msg_sink_b_sptr self)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(blob_msg_sink_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_sink_b_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(blob_msg_sink_b_sptr self, int m)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(blob_msg_sink_b_sptr self, int i) -> long"""
        return _ccsds_swig.blob_msg_sink_b_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(blob_msg_sink_b_sptr self, long max_output_buffer)
        set_max_output_buffer(blob_msg_sink_b_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(blob_msg_sink_b_sptr self, int i) -> long"""
        return _ccsds_swig.blob_msg_sink_b_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(blob_msg_sink_b_sptr self, long min_output_buffer)
        set_min_output_buffer(blob_msg_sink_b_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(blob_msg_sink_b_sptr self, int which) -> float
        pc_input_buffers_full(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(blob_msg_sink_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(blob_msg_sink_b_sptr self, int which) -> float
        pc_input_buffers_full_var(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(blob_msg_sink_b_sptr self, int which) -> float
        pc_output_buffers_full(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(blob_msg_sink_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(blob_msg_sink_b_sptr self, int which) -> float
        pc_output_buffers_full_var(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(blob_msg_sink_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(blob_msg_sink_b_sptr self)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(blob_msg_sink_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.blob_msg_sink_b_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(blob_msg_sink_b_sptr self, int priority) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(blob_msg_sink_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_sink_b_sptr_name(self)

    def symbol_name(self):
        """symbol_name(blob_msg_sink_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_sink_b_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(blob_msg_sink_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(blob_msg_sink_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(blob_msg_sink_b_sptr self) -> long"""
        return _ccsds_swig.blob_msg_sink_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(blob_msg_sink_b_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(blob_msg_sink_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.blob_msg_sink_b_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(blob_msg_sink_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_sink_b_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(blob_msg_sink_b_sptr self, std::string name)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(blob_msg_sink_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.blob_msg_sink_b_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(blob_msg_sink_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(blob_msg_sink_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(blob_msg_sink_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_message_subscribers(self, *args, **kwargs)

blob_msg_sink_b_sptr_swigregister = _ccsds_swig.blob_msg_sink_b_sptr_swigregister
blob_msg_sink_b_sptr_swigregister(blob_msg_sink_b_sptr)

blob_msg_sink_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
blob_msg_sink_b = blob_msg_sink_b.make;

class blob_msg_source_b(object):
    """Proxy of C++ gr::ccsds::blob_msg_source_b class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int const blob_len) -> blob_msg_source_b_sptr

        Params: (blob_len)
        """
        return _ccsds_swig.blob_msg_source_b_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_blob_msg_source_b
    __del__ = lambda self : None;
blob_msg_source_b_swigregister = _ccsds_swig.blob_msg_source_b_swigregister
blob_msg_source_b_swigregister(blob_msg_source_b)

def blob_msg_source_b_make(*args, **kwargs):
  """
    blob_msg_source_b_make(unsigned int const blob_len) -> blob_msg_source_b_sptr

    Params: (blob_len)
    """
  return _ccsds_swig.blob_msg_source_b_make(*args, **kwargs)

class blob_msg_source_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::blob_msg_source_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::blob_msg_source_b)> self) -> blob_msg_source_b_sptr
        __init__(boost::shared_ptr<(gr::ccsds::blob_msg_source_b)> self, blob_msg_source_b p) -> blob_msg_source_b_sptr
        """
        this = _ccsds_swig.new_blob_msg_source_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(blob_msg_source_b_sptr self) -> blob_msg_source_b"""
        return _ccsds_swig.blob_msg_source_b_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_blob_msg_source_b_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(blob_msg_source_b_sptr self, unsigned int const blob_len) -> blob_msg_source_b_sptr

        Params: (blob_len)
        """
        return _ccsds_swig.blob_msg_source_b_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(blob_msg_source_b_sptr self) -> unsigned int"""
        return _ccsds_swig.blob_msg_source_b_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(blob_msg_source_b_sptr self, int which, int delay)
        declare_sample_delay(blob_msg_source_b_sptr self, unsigned int delay)
        """
        return _ccsds_swig.blob_msg_source_b_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(blob_msg_source_b_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.blob_msg_source_b_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(blob_msg_source_b_sptr self) -> double"""
        return _ccsds_swig.blob_msg_source_b_sptr_relative_rate(self)

    def start(self):
        """start(blob_msg_source_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_source_b_sptr_start(self)

    def stop(self):
        """stop(blob_msg_source_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_source_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(blob_msg_source_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.blob_msg_source_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(blob_msg_source_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.blob_msg_source_b_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(blob_msg_source_b_sptr self, int m)"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(blob_msg_source_b_sptr self)"""
        return _ccsds_swig.blob_msg_source_b_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(blob_msg_source_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_source_b_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(blob_msg_source_b_sptr self, int m)"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(blob_msg_source_b_sptr self, int i) -> long"""
        return _ccsds_swig.blob_msg_source_b_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(blob_msg_source_b_sptr self, long max_output_buffer)
        set_max_output_buffer(blob_msg_source_b_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.blob_msg_source_b_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(blob_msg_source_b_sptr self, int i) -> long"""
        return _ccsds_swig.blob_msg_source_b_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(blob_msg_source_b_sptr self, long min_output_buffer)
        set_min_output_buffer(blob_msg_source_b_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.blob_msg_source_b_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(blob_msg_source_b_sptr self, int which) -> float
        pc_input_buffers_full(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(blob_msg_source_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(blob_msg_source_b_sptr self, int which) -> float
        pc_input_buffers_full_var(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(blob_msg_source_b_sptr self, int which) -> float
        pc_output_buffers_full(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(blob_msg_source_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(blob_msg_source_b_sptr self, int which) -> float
        pc_output_buffers_full_var(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(blob_msg_source_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(blob_msg_source_b_sptr self)"""
        return _ccsds_swig.blob_msg_source_b_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(blob_msg_source_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.blob_msg_source_b_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(blob_msg_source_b_sptr self, int priority) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(blob_msg_source_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_source_b_sptr_name(self)

    def symbol_name(self):
        """symbol_name(blob_msg_source_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_source_b_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(blob_msg_source_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(blob_msg_source_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(blob_msg_source_b_sptr self) -> long"""
        return _ccsds_swig.blob_msg_source_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(blob_msg_source_b_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(blob_msg_source_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.blob_msg_source_b_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(blob_msg_source_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_source_b_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(blob_msg_source_b_sptr self, std::string name)"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(blob_msg_source_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.blob_msg_source_b_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(blob_msg_source_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(blob_msg_source_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(blob_msg_source_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_message_subscribers(self, *args, **kwargs)

blob_msg_source_b_sptr_swigregister = _ccsds_swig.blob_msg_source_b_sptr_swigregister
blob_msg_source_b_sptr_swigregister(blob_msg_source_b_sptr)

blob_msg_source_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
blob_msg_source_b = blob_msg_source_b.make;

class softbits_msg_to_bytes_b(object):
    """Proxy of C++ gr::ccsds::softbits_msg_to_bytes_b class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> softbits_msg_to_bytes_b_sptr

        Params: (NONE)
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_make()

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_softbits_msg_to_bytes_b
    __del__ = lambda self : None;
softbits_msg_to_bytes_b_swigregister = _ccsds_swig.softbits_msg_to_bytes_b_swigregister
softbits_msg_to_bytes_b_swigregister(softbits_msg_to_bytes_b)

def softbits_msg_to_bytes_b_make():
  """
    softbits_msg_to_bytes_b_make() -> softbits_msg_to_bytes_b_sptr

    Params: (NONE)
    """
  return _ccsds_swig.softbits_msg_to_bytes_b_make()

class softbits_msg_to_bytes_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::softbits_msg_to_bytes_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::softbits_msg_to_bytes_b)> self) -> softbits_msg_to_bytes_b_sptr
        __init__(boost::shared_ptr<(gr::ccsds::softbits_msg_to_bytes_b)> self, softbits_msg_to_bytes_b p) -> softbits_msg_to_bytes_b_sptr
        """
        this = _ccsds_swig.new_softbits_msg_to_bytes_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(softbits_msg_to_bytes_b_sptr self) -> softbits_msg_to_bytes_b"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_softbits_msg_to_bytes_b_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(softbits_msg_to_bytes_b_sptr self) -> softbits_msg_to_bytes_b_sptr

        Params: (NONE)
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_make(self)

    def history(self):
        """history(softbits_msg_to_bytes_b_sptr self) -> unsigned int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(softbits_msg_to_bytes_b_sptr self, int which, int delay)
        declare_sample_delay(softbits_msg_to_bytes_b_sptr self, unsigned int delay)
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(softbits_msg_to_bytes_b_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(softbits_msg_to_bytes_b_sptr self) -> double"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_relative_rate(self)

    def start(self):
        """start(softbits_msg_to_bytes_b_sptr self) -> bool"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_start(self)

    def stop(self):
        """stop(softbits_msg_to_bytes_b_sptr self) -> bool"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(softbits_msg_to_bytes_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(softbits_msg_to_bytes_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(softbits_msg_to_bytes_b_sptr self, int m)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(softbits_msg_to_bytes_b_sptr self)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(softbits_msg_to_bytes_b_sptr self) -> bool"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(softbits_msg_to_bytes_b_sptr self, int m)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(softbits_msg_to_bytes_b_sptr self, int i) -> long"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(softbits_msg_to_bytes_b_sptr self, long max_output_buffer)
        set_max_output_buffer(softbits_msg_to_bytes_b_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(softbits_msg_to_bytes_b_sptr self, int i) -> long"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(softbits_msg_to_bytes_b_sptr self, long min_output_buffer)
        set_min_output_buffer(softbits_msg_to_bytes_b_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_input_buffers_full(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_input_buffers_full_var(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_output_buffers_full(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_output_buffers_full_var(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(softbits_msg_to_bytes_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(softbits_msg_to_bytes_b_sptr self)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(softbits_msg_to_bytes_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(softbits_msg_to_bytes_b_sptr self, int priority) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(softbits_msg_to_bytes_b_sptr self) -> std::string"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_name(self)

    def symbol_name(self):
        """symbol_name(softbits_msg_to_bytes_b_sptr self) -> std::string"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(softbits_msg_to_bytes_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(softbits_msg_to_bytes_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(softbits_msg_to_bytes_b_sptr self) -> long"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(softbits_msg_to_bytes_b_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(softbits_msg_to_bytes_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(softbits_msg_to_bytes_b_sptr self) -> std::string"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(softbits_msg_to_bytes_b_sptr self, std::string name)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(softbits_msg_to_bytes_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(softbits_msg_to_bytes_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(softbits_msg_to_bytes_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(softbits_msg_to_bytes_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_message_subscribers(self, *args, **kwargs)

softbits_msg_to_bytes_b_sptr_swigregister = _ccsds_swig.softbits_msg_to_bytes_b_sptr_swigregister
softbits_msg_to_bytes_b_sptr_swigregister(softbits_msg_to_bytes_b_sptr)

softbits_msg_to_bytes_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
softbits_msg_to_bytes_b = softbits_msg_to_bytes_b.make;

class rs_encode(object):
    """
    Takes I frames and generates the transmitted codeblock out of it.

    The block has an input message port named "in" at which frames of length  bytes are received. On reception the frames are interleaved and encoded. The generated codeblock consisting of  bytes is then queued in the output message port named "out".
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int const I) -> rs_encode_sptr

        Params: (I)
        """
        return _ccsds_swig.rs_encode_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_rs_encode
    __del__ = lambda self : None;
rs_encode_swigregister = _ccsds_swig.rs_encode_swigregister
rs_encode_swigregister(rs_encode)

def rs_encode_make(*args, **kwargs):
  """
    rs_encode_make(unsigned int const I) -> rs_encode_sptr

    Params: (I)
    """
  return _ccsds_swig.rs_encode_make(*args, **kwargs)

class rs_encode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::rs_encode)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::rs_encode)> self) -> rs_encode_sptr
        __init__(boost::shared_ptr<(gr::ccsds::rs_encode)> self, rs_encode p) -> rs_encode_sptr
        """
        this = _ccsds_swig.new_rs_encode_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(rs_encode_sptr self) -> rs_encode"""
        return _ccsds_swig.rs_encode_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_rs_encode_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(rs_encode_sptr self, unsigned int const I) -> rs_encode_sptr

        Params: (I)
        """
        return _ccsds_swig.rs_encode_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(rs_encode_sptr self) -> unsigned int"""
        return _ccsds_swig.rs_encode_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rs_encode_sptr self, int which, int delay)
        declare_sample_delay(rs_encode_sptr self, unsigned int delay)
        """
        return _ccsds_swig.rs_encode_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(rs_encode_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.rs_encode_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(rs_encode_sptr self) -> double"""
        return _ccsds_swig.rs_encode_sptr_relative_rate(self)

    def start(self):
        """start(rs_encode_sptr self) -> bool"""
        return _ccsds_swig.rs_encode_sptr_start(self)

    def stop(self):
        """stop(rs_encode_sptr self) -> bool"""
        return _ccsds_swig.rs_encode_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(rs_encode_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.rs_encode_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(rs_encode_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.rs_encode_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(rs_encode_sptr self, int m)"""
        return _ccsds_swig.rs_encode_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rs_encode_sptr self)"""
        return _ccsds_swig.rs_encode_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rs_encode_sptr self) -> bool"""
        return _ccsds_swig.rs_encode_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(rs_encode_sptr self, int m)"""
        return _ccsds_swig.rs_encode_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(rs_encode_sptr self, int i) -> long"""
        return _ccsds_swig.rs_encode_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rs_encode_sptr self, long max_output_buffer)
        set_max_output_buffer(rs_encode_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.rs_encode_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(rs_encode_sptr self, int i) -> long"""
        return _ccsds_swig.rs_encode_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rs_encode_sptr self, long min_output_buffer)
        set_min_output_buffer(rs_encode_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.rs_encode_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rs_encode_sptr self, int which) -> float
        pc_input_buffers_full(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rs_encode_sptr self, int which) -> float
        pc_input_buffers_full_avg(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rs_encode_sptr self, int which) -> float
        pc_input_buffers_full_var(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rs_encode_sptr self, int which) -> float
        pc_output_buffers_full(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rs_encode_sptr self, int which) -> float
        pc_output_buffers_full_avg(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rs_encode_sptr self, int which) -> float
        pc_output_buffers_full_var(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(rs_encode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.rs_encode_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(rs_encode_sptr self)"""
        return _ccsds_swig.rs_encode_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(rs_encode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.rs_encode_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(rs_encode_sptr self, int priority) -> int"""
        return _ccsds_swig.rs_encode_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(rs_encode_sptr self) -> std::string"""
        return _ccsds_swig.rs_encode_sptr_name(self)

    def symbol_name(self):
        """symbol_name(rs_encode_sptr self) -> std::string"""
        return _ccsds_swig.rs_encode_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(rs_encode_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.rs_encode_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(rs_encode_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.rs_encode_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(rs_encode_sptr self) -> long"""
        return _ccsds_swig.rs_encode_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(rs_encode_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.rs_encode_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(rs_encode_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.rs_encode_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(rs_encode_sptr self) -> std::string"""
        return _ccsds_swig.rs_encode_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(rs_encode_sptr self, std::string name)"""
        return _ccsds_swig.rs_encode_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(rs_encode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.rs_encode_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(rs_encode_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.rs_encode_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(rs_encode_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.rs_encode_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(rs_encode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.rs_encode_sptr_message_subscribers(self, *args, **kwargs)

rs_encode_sptr_swigregister = _ccsds_swig.rs_encode_sptr_swigregister
rs_encode_sptr_swigregister(rs_encode_sptr)

rs_encode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rs_encode = rs_encode.make;

class rs_decode(object):
    """
    Takes the transmitted codeblock and generates the frame out of it, or drops it, if recovery is not possible.

    The block has an input message port named "in" at which codeblocks of length  bytes are received. On reception the data codeblock is interleaved and decoded. The generated frame consisting of  bytes is then queued in the output message port named "out" or dropped if it can't be decoded.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    BERLEKAMP = _ccsds_swig.rs_decode_BERLEKAMP
    CONVENTIONAL = _ccsds_swig.rs_decode_CONVENTIONAL
    def make(*args, **kwargs):
        """
        make(unsigned int const I, gr::ccsds::rs_decode::repr_t const representation) -> rs_decode_sptr

        Create RS decoder.

        Params: (I, representation)
        """
        return _ccsds_swig.rs_decode_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_rs_decode
    __del__ = lambda self : None;
rs_decode_swigregister = _ccsds_swig.rs_decode_swigregister
rs_decode_swigregister(rs_decode)

def rs_decode_make(*args, **kwargs):
  """
    rs_decode_make(unsigned int const I, gr::ccsds::rs_decode::repr_t const representation) -> rs_decode_sptr

    Create RS decoder.

    Params: (I, representation)
    """
  return _ccsds_swig.rs_decode_make(*args, **kwargs)

class rs_decode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::rs_decode)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::rs_decode)> self) -> rs_decode_sptr
        __init__(boost::shared_ptr<(gr::ccsds::rs_decode)> self, rs_decode p) -> rs_decode_sptr
        """
        this = _ccsds_swig.new_rs_decode_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(rs_decode_sptr self) -> rs_decode"""
        return _ccsds_swig.rs_decode_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_rs_decode_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(rs_decode_sptr self, unsigned int const I, gr::ccsds::rs_decode::repr_t const representation) -> rs_decode_sptr

        Create RS decoder.

        Params: (I, representation)
        """
        return _ccsds_swig.rs_decode_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(rs_decode_sptr self) -> unsigned int"""
        return _ccsds_swig.rs_decode_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rs_decode_sptr self, int which, int delay)
        declare_sample_delay(rs_decode_sptr self, unsigned int delay)
        """
        return _ccsds_swig.rs_decode_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(rs_decode_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.rs_decode_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(rs_decode_sptr self) -> double"""
        return _ccsds_swig.rs_decode_sptr_relative_rate(self)

    def start(self):
        """start(rs_decode_sptr self) -> bool"""
        return _ccsds_swig.rs_decode_sptr_start(self)

    def stop(self):
        """stop(rs_decode_sptr self) -> bool"""
        return _ccsds_swig.rs_decode_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(rs_decode_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.rs_decode_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(rs_decode_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.rs_decode_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(rs_decode_sptr self, int m)"""
        return _ccsds_swig.rs_decode_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rs_decode_sptr self)"""
        return _ccsds_swig.rs_decode_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rs_decode_sptr self) -> bool"""
        return _ccsds_swig.rs_decode_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(rs_decode_sptr self, int m)"""
        return _ccsds_swig.rs_decode_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(rs_decode_sptr self, int i) -> long"""
        return _ccsds_swig.rs_decode_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rs_decode_sptr self, long max_output_buffer)
        set_max_output_buffer(rs_decode_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.rs_decode_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(rs_decode_sptr self, int i) -> long"""
        return _ccsds_swig.rs_decode_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rs_decode_sptr self, long min_output_buffer)
        set_min_output_buffer(rs_decode_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.rs_decode_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rs_decode_sptr self, int which) -> float
        pc_input_buffers_full(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rs_decode_sptr self, int which) -> float
        pc_input_buffers_full_avg(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rs_decode_sptr self, int which) -> float
        pc_input_buffers_full_var(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rs_decode_sptr self, int which) -> float
        pc_output_buffers_full(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rs_decode_sptr self, int which) -> float
        pc_output_buffers_full_avg(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rs_decode_sptr self, int which) -> float
        pc_output_buffers_full_var(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(rs_decode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.rs_decode_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(rs_decode_sptr self)"""
        return _ccsds_swig.rs_decode_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(rs_decode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.rs_decode_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(rs_decode_sptr self, int priority) -> int"""
        return _ccsds_swig.rs_decode_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(rs_decode_sptr self) -> std::string"""
        return _ccsds_swig.rs_decode_sptr_name(self)

    def symbol_name(self):
        """symbol_name(rs_decode_sptr self) -> std::string"""
        return _ccsds_swig.rs_decode_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(rs_decode_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.rs_decode_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(rs_decode_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.rs_decode_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(rs_decode_sptr self) -> long"""
        return _ccsds_swig.rs_decode_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(rs_decode_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.rs_decode_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(rs_decode_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.rs_decode_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(rs_decode_sptr self) -> std::string"""
        return _ccsds_swig.rs_decode_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(rs_decode_sptr self, std::string name)"""
        return _ccsds_swig.rs_decode_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(rs_decode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.rs_decode_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(rs_decode_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.rs_decode_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(rs_decode_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.rs_decode_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(rs_decode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.rs_decode_sptr_message_subscribers(self, *args, **kwargs)

rs_decode_sptr_swigregister = _ccsds_swig.rs_decode_sptr_swigregister
rs_decode_sptr_swigregister(rs_decode_sptr)

rs_decode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rs_decode = rs_decode.make;

class mpsk_ambiguity_resolver_f(object):
    """
    M-PSK soft bit ambiguity resolution and frame synchronization.

    The input to this block is a stream of  grouped soft bits. The output of this block is a asynchronous message containing a float vector with the soft bits of a frame. The bytes passed to this block as ASM are cut off, but any skipped bits will be in the output message.

    So if you pass the two ASM bytes 0x00 0xAA to this block followed by two bytes frame data (FD1 and FD2), followed by another two bytes ASM and set  to zero the output will be a message containing FD1 and FD2. If  is set to two, the output will be FD1, FD2 followed by the first two zero bits from the ASM.

    Using  (setting it to nonzero values)

    The block will start in searchmode, looking for every possible bit offset in all possible  ambiguities. Once an ASM is found it will enter locked state where it will only check for the ASM at the expected position and ambiguity. If the ASM is found a counter is increased up to . If an exprected ASM is not found the counter is decreased. If the counter reaches zero the block goes into search mode again.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int const M, std::string ASM, unsigned int const asm_len, unsigned int const threshold, 
            float const correlation_threshold, unsigned int const frame_length, 
            unsigned int const num_tail_syms=0) -> mpsk_ambiguity_resolver_f_sptr

        Params: (M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms)
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_make(*args, **kwargs)

    make = staticmethod(make)
    def get_correlation(self):
        """
        get_correlation(mpsk_ambiguity_resolver_f self) -> float

        Params: ()
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_get_correlation(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_ambiguity_resolver_f
    __del__ = lambda self : None;
mpsk_ambiguity_resolver_f_swigregister = _ccsds_swig.mpsk_ambiguity_resolver_f_swigregister
mpsk_ambiguity_resolver_f_swigregister(mpsk_ambiguity_resolver_f)

def mpsk_ambiguity_resolver_f_make(*args, **kwargs):
  """
    mpsk_ambiguity_resolver_f_make(unsigned int const M, std::string ASM, unsigned int const asm_len, unsigned int const threshold, 
        float const correlation_threshold, unsigned int const frame_length, 
        unsigned int const num_tail_syms=0) -> mpsk_ambiguity_resolver_f_sptr

    Params: (M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms)
    """
  return _ccsds_swig.mpsk_ambiguity_resolver_f_make(*args, **kwargs)

class mpsk_ambiguity_resolver_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::mpsk_ambiguity_resolver_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_ambiguity_resolver_f)> self) -> mpsk_ambiguity_resolver_f_sptr
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_ambiguity_resolver_f)> self, mpsk_ambiguity_resolver_f p) -> mpsk_ambiguity_resolver_f_sptr
        """
        this = _ccsds_swig.new_mpsk_ambiguity_resolver_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mpsk_ambiguity_resolver_f_sptr self) -> mpsk_ambiguity_resolver_f"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_ambiguity_resolver_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mpsk_ambiguity_resolver_f_sptr self, unsigned int const M, std::string ASM, unsigned int const asm_len, unsigned int const threshold, 
            float const correlation_threshold, unsigned int const frame_length, 
            unsigned int const num_tail_syms=0) -> mpsk_ambiguity_resolver_f_sptr

        Params: (M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms)
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_make(self, *args, **kwargs)

    def get_correlation(self):
        """
        get_correlation(mpsk_ambiguity_resolver_f_sptr self) -> float

        Params: ()
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_get_correlation(self)

    def history(self):
        """history(mpsk_ambiguity_resolver_f_sptr self) -> unsigned int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mpsk_ambiguity_resolver_f_sptr self, int which, int delay)
        declare_sample_delay(mpsk_ambiguity_resolver_f_sptr self, unsigned int delay)
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mpsk_ambiguity_resolver_f_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mpsk_ambiguity_resolver_f_sptr self) -> double"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_relative_rate(self)

    def start(self):
        """start(mpsk_ambiguity_resolver_f_sptr self) -> bool"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_start(self)

    def stop(self):
        """stop(mpsk_ambiguity_resolver_f_sptr self) -> bool"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mpsk_ambiguity_resolver_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mpsk_ambiguity_resolver_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mpsk_ambiguity_resolver_f_sptr self, int m)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mpsk_ambiguity_resolver_f_sptr self)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mpsk_ambiguity_resolver_f_sptr self) -> bool"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mpsk_ambiguity_resolver_f_sptr self, int m)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mpsk_ambiguity_resolver_f_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mpsk_ambiguity_resolver_f_sptr self, long max_output_buffer)
        set_max_output_buffer(mpsk_ambiguity_resolver_f_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mpsk_ambiguity_resolver_f_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mpsk_ambiguity_resolver_f_sptr self, long min_output_buffer)
        set_min_output_buffer(mpsk_ambiguity_resolver_f_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_input_buffers_full(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_input_buffers_full_var(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_output_buffers_full(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_output_buffers_full_var(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mpsk_ambiguity_resolver_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mpsk_ambiguity_resolver_f_sptr self)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mpsk_ambiguity_resolver_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mpsk_ambiguity_resolver_f_sptr self, int priority) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mpsk_ambiguity_resolver_f_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mpsk_ambiguity_resolver_f_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mpsk_ambiguity_resolver_f_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mpsk_ambiguity_resolver_f_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mpsk_ambiguity_resolver_f_sptr self) -> long"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mpsk_ambiguity_resolver_f_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mpsk_ambiguity_resolver_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mpsk_ambiguity_resolver_f_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mpsk_ambiguity_resolver_f_sptr self, std::string name)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mpsk_ambiguity_resolver_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mpsk_ambiguity_resolver_f_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mpsk_ambiguity_resolver_f_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mpsk_ambiguity_resolver_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_message_subscribers(self, *args, **kwargs)

mpsk_ambiguity_resolver_f_sptr_swigregister = _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_swigregister
mpsk_ambiguity_resolver_f_sptr_swigregister(mpsk_ambiguity_resolver_f_sptr)

mpsk_ambiguity_resolver_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mpsk_ambiguity_resolver_f = mpsk_ambiguity_resolver_f.make;

class conv_decode27(object):
    """
    Perform unpuncturing and convloutional decoding on the input stream.

    This block takes an asynchronous message of punctured convolutional encoded softbits. The input softbits are frame synchronized, which means that the leading and following ASM sequences have been stripped off and only contains the encoded symbols from the actual frame data.

    It performs unpuncturing and viterbi decoding of the message and outputs the decoded data stream as a BLOB message of packed bytes.

    Since before and after each message a known ASM is send, the knowledge of this ASM is used to determine the start and and state of the viterbi decoder as well as the tail sequence of the block, which is the start of the new ASM sequence that still depends on the data bits of the current block due to the code's constraint length.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type, 
            unsigned int const block_len, std::string ASM) -> conv_decode27_sptr

        Params: (gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM)
        """
        return _ccsds_swig.conv_decode27_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_conv_decode27
    __del__ = lambda self : None;
conv_decode27_swigregister = _ccsds_swig.conv_decode27_swigregister
conv_decode27_swigregister(conv_decode27)

def conv_decode27_make(*args, **kwargs):
  """
    conv_decode27_make(unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type, 
        unsigned int const block_len, std::string ASM) -> conv_decode27_sptr

    Params: (gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM)
    """
  return _ccsds_swig.conv_decode27_make(*args, **kwargs)

class conv_decode27_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::conv_decode27)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::conv_decode27)> self) -> conv_decode27_sptr
        __init__(boost::shared_ptr<(gr::ccsds::conv_decode27)> self, conv_decode27 p) -> conv_decode27_sptr
        """
        this = _ccsds_swig.new_conv_decode27_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(conv_decode27_sptr self) -> conv_decode27"""
        return _ccsds_swig.conv_decode27_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_conv_decode27_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(conv_decode27_sptr self, unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type, 
            unsigned int const block_len, std::string ASM) -> conv_decode27_sptr

        Params: (gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM)
        """
        return _ccsds_swig.conv_decode27_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(conv_decode27_sptr self) -> unsigned int"""
        return _ccsds_swig.conv_decode27_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(conv_decode27_sptr self, int which, int delay)
        declare_sample_delay(conv_decode27_sptr self, unsigned int delay)
        """
        return _ccsds_swig.conv_decode27_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(conv_decode27_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.conv_decode27_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(conv_decode27_sptr self) -> double"""
        return _ccsds_swig.conv_decode27_sptr_relative_rate(self)

    def start(self):
        """start(conv_decode27_sptr self) -> bool"""
        return _ccsds_swig.conv_decode27_sptr_start(self)

    def stop(self):
        """stop(conv_decode27_sptr self) -> bool"""
        return _ccsds_swig.conv_decode27_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(conv_decode27_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.conv_decode27_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(conv_decode27_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.conv_decode27_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(conv_decode27_sptr self, int m)"""
        return _ccsds_swig.conv_decode27_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(conv_decode27_sptr self)"""
        return _ccsds_swig.conv_decode27_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(conv_decode27_sptr self) -> bool"""
        return _ccsds_swig.conv_decode27_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(conv_decode27_sptr self, int m)"""
        return _ccsds_swig.conv_decode27_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(conv_decode27_sptr self, int i) -> long"""
        return _ccsds_swig.conv_decode27_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(conv_decode27_sptr self, long max_output_buffer)
        set_max_output_buffer(conv_decode27_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.conv_decode27_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(conv_decode27_sptr self, int i) -> long"""
        return _ccsds_swig.conv_decode27_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(conv_decode27_sptr self, long min_output_buffer)
        set_min_output_buffer(conv_decode27_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.conv_decode27_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(conv_decode27_sptr self, int which) -> float
        pc_input_buffers_full(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(conv_decode27_sptr self, int which) -> float
        pc_input_buffers_full_avg(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(conv_decode27_sptr self, int which) -> float
        pc_input_buffers_full_var(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(conv_decode27_sptr self, int which) -> float
        pc_output_buffers_full(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(conv_decode27_sptr self, int which) -> float
        pc_output_buffers_full_avg(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(conv_decode27_sptr self, int which) -> float
        pc_output_buffers_full_var(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(conv_decode27_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.conv_decode27_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(conv_decode27_sptr self)"""
        return _ccsds_swig.conv_decode27_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(conv_decode27_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.conv_decode27_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(conv_decode27_sptr self, int priority) -> int"""
        return _ccsds_swig.conv_decode27_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(conv_decode27_sptr self) -> std::string"""
        return _ccsds_swig.conv_decode27_sptr_name(self)

    def symbol_name(self):
        """symbol_name(conv_decode27_sptr self) -> std::string"""
        return _ccsds_swig.conv_decode27_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(conv_decode27_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.conv_decode27_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(conv_decode27_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.conv_decode27_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(conv_decode27_sptr self) -> long"""
        return _ccsds_swig.conv_decode27_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(conv_decode27_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.conv_decode27_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(conv_decode27_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.conv_decode27_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(conv_decode27_sptr self) -> std::string"""
        return _ccsds_swig.conv_decode27_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(conv_decode27_sptr self, std::string name)"""
        return _ccsds_swig.conv_decode27_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(conv_decode27_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.conv_decode27_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(conv_decode27_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.conv_decode27_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(conv_decode27_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.conv_decode27_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(conv_decode27_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.conv_decode27_sptr_message_subscribers(self, *args, **kwargs)

conv_decode27_sptr_swigregister = _ccsds_swig.conv_decode27_sptr_swigregister
conv_decode27_sptr_swigregister(conv_decode27_sptr)

conv_decode27_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conv_decode27 = conv_decode27.make;

class mpsk_detector_soft_cf(object):
    """
    M-PSK soft bit detector.

    M-PSK soft bit detector.

    The incomming phase is converted to a conteallation point (counting counterclockwise starting from zero at symbol 1+0j) with the non linear function:



    And then the constellation point is mapped to the actual symbol bit sequence by a binary to gray code mapping []:



    For each incomming symbol  output symbols are generated containing the detected soft bit as float values, where -1.0f represents the most confident 0 bit, 0.0f is an erasure (in this case, the received symbol has no energy at all) and 1.0f represents the most confident 1 bit.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int const M) -> mpsk_detector_soft_cf_sptr

        Params: (M)
        """
        return _ccsds_swig.mpsk_detector_soft_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_mpsk_detector_soft_cf
    __del__ = lambda self : None;
mpsk_detector_soft_cf_swigregister = _ccsds_swig.mpsk_detector_soft_cf_swigregister
mpsk_detector_soft_cf_swigregister(mpsk_detector_soft_cf)

def mpsk_detector_soft_cf_make(*args, **kwargs):
  """
    mpsk_detector_soft_cf_make(unsigned int const M) -> mpsk_detector_soft_cf_sptr

    Params: (M)
    """
  return _ccsds_swig.mpsk_detector_soft_cf_make(*args, **kwargs)

class mpsk_detector_soft_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::mpsk_detector_soft_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_detector_soft_cf)> self) -> mpsk_detector_soft_cf_sptr
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_detector_soft_cf)> self, mpsk_detector_soft_cf p) -> mpsk_detector_soft_cf_sptr
        """
        this = _ccsds_swig.new_mpsk_detector_soft_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mpsk_detector_soft_cf_sptr self) -> mpsk_detector_soft_cf"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_detector_soft_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mpsk_detector_soft_cf_sptr self, unsigned int const M) -> mpsk_detector_soft_cf_sptr

        Params: (M)
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mpsk_detector_soft_cf_sptr self) -> unsigned int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mpsk_detector_soft_cf_sptr self, int which, int delay)
        declare_sample_delay(mpsk_detector_soft_cf_sptr self, unsigned int delay)
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mpsk_detector_soft_cf_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mpsk_detector_soft_cf_sptr self) -> double"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_relative_rate(self)

    def start(self):
        """start(mpsk_detector_soft_cf_sptr self) -> bool"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_start(self)

    def stop(self):
        """stop(mpsk_detector_soft_cf_sptr self) -> bool"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mpsk_detector_soft_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mpsk_detector_soft_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mpsk_detector_soft_cf_sptr self, int m)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mpsk_detector_soft_cf_sptr self)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mpsk_detector_soft_cf_sptr self) -> bool"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mpsk_detector_soft_cf_sptr self, int m)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mpsk_detector_soft_cf_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mpsk_detector_soft_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(mpsk_detector_soft_cf_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mpsk_detector_soft_cf_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mpsk_detector_soft_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(mpsk_detector_soft_cf_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_input_buffers_full(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_output_buffers_full(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mpsk_detector_soft_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mpsk_detector_soft_cf_sptr self)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mpsk_detector_soft_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mpsk_detector_soft_cf_sptr self, int priority) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mpsk_detector_soft_cf_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mpsk_detector_soft_cf_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mpsk_detector_soft_cf_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mpsk_detector_soft_cf_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mpsk_detector_soft_cf_sptr self) -> long"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mpsk_detector_soft_cf_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mpsk_detector_soft_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mpsk_detector_soft_cf_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mpsk_detector_soft_cf_sptr self, std::string name)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mpsk_detector_soft_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mpsk_detector_soft_cf_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mpsk_detector_soft_cf_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mpsk_detector_soft_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_message_subscribers(self, *args, **kwargs)

mpsk_detector_soft_cf_sptr_swigregister = _ccsds_swig.mpsk_detector_soft_cf_sptr_swigregister
mpsk_detector_soft_cf_sptr_swigregister(mpsk_detector_soft_cf_sptr)

mpsk_detector_soft_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mpsk_detector_soft_cf = mpsk_detector_soft_cf.make;

class mpsk_mod_bc(object):
    """Proxy of C++ gr::ccsds::mpsk_mod_bc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int M) -> mpsk_mod_bc_sptr

        Params: (M)
        """
        return _ccsds_swig.mpsk_mod_bc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_mpsk_mod_bc
    __del__ = lambda self : None;
mpsk_mod_bc_swigregister = _ccsds_swig.mpsk_mod_bc_swigregister
mpsk_mod_bc_swigregister(mpsk_mod_bc)

def mpsk_mod_bc_make(*args, **kwargs):
  """
    mpsk_mod_bc_make(unsigned int M) -> mpsk_mod_bc_sptr

    Params: (M)
    """
  return _ccsds_swig.mpsk_mod_bc_make(*args, **kwargs)

class mpsk_mod_bc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::mpsk_mod_bc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_mod_bc)> self) -> mpsk_mod_bc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_mod_bc)> self, mpsk_mod_bc p) -> mpsk_mod_bc_sptr
        """
        this = _ccsds_swig.new_mpsk_mod_bc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mpsk_mod_bc_sptr self) -> mpsk_mod_bc"""
        return _ccsds_swig.mpsk_mod_bc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_mod_bc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mpsk_mod_bc_sptr self, unsigned int M) -> mpsk_mod_bc_sptr

        Params: (M)
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mpsk_mod_bc_sptr self) -> unsigned int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mpsk_mod_bc_sptr self, int which, int delay)
        declare_sample_delay(mpsk_mod_bc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mpsk_mod_bc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mpsk_mod_bc_sptr self) -> double"""
        return _ccsds_swig.mpsk_mod_bc_sptr_relative_rate(self)

    def start(self):
        """start(mpsk_mod_bc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_mod_bc_sptr_start(self)

    def stop(self):
        """stop(mpsk_mod_bc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_mod_bc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mpsk_mod_bc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.mpsk_mod_bc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mpsk_mod_bc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.mpsk_mod_bc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mpsk_mod_bc_sptr self, int m)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mpsk_mod_bc_sptr self)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mpsk_mod_bc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_mod_bc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mpsk_mod_bc_sptr self, int m)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mpsk_mod_bc_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_mod_bc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mpsk_mod_bc_sptr self, long max_output_buffer)
        set_max_output_buffer(mpsk_mod_bc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mpsk_mod_bc_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_mod_bc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mpsk_mod_bc_sptr self, long min_output_buffer)
        set_min_output_buffer(mpsk_mod_bc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mpsk_mod_bc_sptr self, int which) -> float
        pc_input_buffers_full(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mpsk_mod_bc_sptr self, int which) -> float
        pc_input_buffers_full_avg(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mpsk_mod_bc_sptr self, int which) -> float
        pc_input_buffers_full_var(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mpsk_mod_bc_sptr self, int which) -> float
        pc_output_buffers_full(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mpsk_mod_bc_sptr self, int which) -> float
        pc_output_buffers_full_avg(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mpsk_mod_bc_sptr self, int which) -> float
        pc_output_buffers_full_var(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mpsk_mod_bc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mpsk_mod_bc_sptr self)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mpsk_mod_bc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.mpsk_mod_bc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mpsk_mod_bc_sptr self, int priority) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mpsk_mod_bc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_mod_bc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mpsk_mod_bc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_mod_bc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mpsk_mod_bc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mpsk_mod_bc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mpsk_mod_bc_sptr self) -> long"""
        return _ccsds_swig.mpsk_mod_bc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mpsk_mod_bc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mpsk_mod_bc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.mpsk_mod_bc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mpsk_mod_bc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_mod_bc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mpsk_mod_bc_sptr self, std::string name)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mpsk_mod_bc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.mpsk_mod_bc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mpsk_mod_bc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mpsk_mod_bc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mpsk_mod_bc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_message_subscribers(self, *args, **kwargs)

mpsk_mod_bc_sptr_swigregister = _ccsds_swig.mpsk_mod_bc_sptr_swigregister
mpsk_mod_bc_sptr_swigregister(mpsk_mod_bc_sptr)

mpsk_mod_bc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mpsk_mod_bc = mpsk_mod_bc.make;

class conv_encode27_bb(object):
    """Perform convloutional encoding and puncturing on the input stream."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type) -> conv_encode27_bb_sptr

        Params: (gen_poly_c1, gen_poly_c2, puncturing_type)
        """
        return _ccsds_swig.conv_encode27_bb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_conv_encode27_bb
    __del__ = lambda self : None;
conv_encode27_bb_swigregister = _ccsds_swig.conv_encode27_bb_swigregister
conv_encode27_bb_swigregister(conv_encode27_bb)

def conv_encode27_bb_make(*args, **kwargs):
  """
    conv_encode27_bb_make(unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type) -> conv_encode27_bb_sptr

    Params: (gen_poly_c1, gen_poly_c2, puncturing_type)
    """
  return _ccsds_swig.conv_encode27_bb_make(*args, **kwargs)

class conv_encode27_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::conv_encode27_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::conv_encode27_bb)> self) -> conv_encode27_bb_sptr
        __init__(boost::shared_ptr<(gr::ccsds::conv_encode27_bb)> self, conv_encode27_bb p) -> conv_encode27_bb_sptr
        """
        this = _ccsds_swig.new_conv_encode27_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(conv_encode27_bb_sptr self) -> conv_encode27_bb"""
        return _ccsds_swig.conv_encode27_bb_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_conv_encode27_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(conv_encode27_bb_sptr self, unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type) -> conv_encode27_bb_sptr

        Params: (gen_poly_c1, gen_poly_c2, puncturing_type)
        """
        return _ccsds_swig.conv_encode27_bb_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(conv_encode27_bb_sptr self) -> unsigned int"""
        return _ccsds_swig.conv_encode27_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(conv_encode27_bb_sptr self, int which, int delay)
        declare_sample_delay(conv_encode27_bb_sptr self, unsigned int delay)
        """
        return _ccsds_swig.conv_encode27_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(conv_encode27_bb_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.conv_encode27_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(conv_encode27_bb_sptr self) -> double"""
        return _ccsds_swig.conv_encode27_bb_sptr_relative_rate(self)

    def start(self):
        """start(conv_encode27_bb_sptr self) -> bool"""
        return _ccsds_swig.conv_encode27_bb_sptr_start(self)

    def stop(self):
        """stop(conv_encode27_bb_sptr self) -> bool"""
        return _ccsds_swig.conv_encode27_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(conv_encode27_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.conv_encode27_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(conv_encode27_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.conv_encode27_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(conv_encode27_bb_sptr self, int m)"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(conv_encode27_bb_sptr self)"""
        return _ccsds_swig.conv_encode27_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(conv_encode27_bb_sptr self) -> bool"""
        return _ccsds_swig.conv_encode27_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(conv_encode27_bb_sptr self, int m)"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(conv_encode27_bb_sptr self, int i) -> long"""
        return _ccsds_swig.conv_encode27_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(conv_encode27_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(conv_encode27_bb_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.conv_encode27_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(conv_encode27_bb_sptr self, int i) -> long"""
        return _ccsds_swig.conv_encode27_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(conv_encode27_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(conv_encode27_bb_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.conv_encode27_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(conv_encode27_bb_sptr self, int which) -> float
        pc_input_buffers_full(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(conv_encode27_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(conv_encode27_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(conv_encode27_bb_sptr self, int which) -> float
        pc_output_buffers_full(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(conv_encode27_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(conv_encode27_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(conv_encode27_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(conv_encode27_bb_sptr self)"""
        return _ccsds_swig.conv_encode27_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(conv_encode27_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.conv_encode27_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(conv_encode27_bb_sptr self, int priority) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(conv_encode27_bb_sptr self) -> std::string"""
        return _ccsds_swig.conv_encode27_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(conv_encode27_bb_sptr self) -> std::string"""
        return _ccsds_swig.conv_encode27_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(conv_encode27_bb_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(conv_encode27_bb_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(conv_encode27_bb_sptr self) -> long"""
        return _ccsds_swig.conv_encode27_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(conv_encode27_bb_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(conv_encode27_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.conv_encode27_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(conv_encode27_bb_sptr self) -> std::string"""
        return _ccsds_swig.conv_encode27_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(conv_encode27_bb_sptr self, std::string name)"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(conv_encode27_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.conv_encode27_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(conv_encode27_bb_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(conv_encode27_bb_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(conv_encode27_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_message_subscribers(self, *args, **kwargs)

conv_encode27_bb_sptr_swigregister = _ccsds_swig.conv_encode27_bb_sptr_swigregister
conv_encode27_bb_sptr_swigregister(conv_encode27_bb_sptr)

conv_encode27_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conv_encode27_bb = conv_encode27_bb.make;

class mpsk_preamble_cc(object):
    """Proxy of C++ gr::ccsds::mpsk_preamble_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int const num_symbols) -> mpsk_preamble_cc_sptr

        Params: (num_symbols)
        """
        return _ccsds_swig.mpsk_preamble_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_mpsk_preamble_cc
    __del__ = lambda self : None;
mpsk_preamble_cc_swigregister = _ccsds_swig.mpsk_preamble_cc_swigregister
mpsk_preamble_cc_swigregister(mpsk_preamble_cc)

def mpsk_preamble_cc_make(*args, **kwargs):
  """
    mpsk_preamble_cc_make(unsigned int const num_symbols) -> mpsk_preamble_cc_sptr

    Params: (num_symbols)
    """
  return _ccsds_swig.mpsk_preamble_cc_make(*args, **kwargs)

class mpsk_preamble_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::mpsk_preamble_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_preamble_cc)> self) -> mpsk_preamble_cc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_preamble_cc)> self, mpsk_preamble_cc p) -> mpsk_preamble_cc_sptr
        """
        this = _ccsds_swig.new_mpsk_preamble_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mpsk_preamble_cc_sptr self) -> mpsk_preamble_cc"""
        return _ccsds_swig.mpsk_preamble_cc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_preamble_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mpsk_preamble_cc_sptr self, unsigned int const num_symbols) -> mpsk_preamble_cc_sptr

        Params: (num_symbols)
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mpsk_preamble_cc_sptr self) -> unsigned int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mpsk_preamble_cc_sptr self, int which, int delay)
        declare_sample_delay(mpsk_preamble_cc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mpsk_preamble_cc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mpsk_preamble_cc_sptr self) -> double"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_relative_rate(self)

    def start(self):
        """start(mpsk_preamble_cc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_start(self)

    def stop(self):
        """stop(mpsk_preamble_cc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mpsk_preamble_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mpsk_preamble_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mpsk_preamble_cc_sptr self, int m)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mpsk_preamble_cc_sptr self)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mpsk_preamble_cc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mpsk_preamble_cc_sptr self, int m)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mpsk_preamble_cc_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mpsk_preamble_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(mpsk_preamble_cc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mpsk_preamble_cc_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mpsk_preamble_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(mpsk_preamble_cc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mpsk_preamble_cc_sptr self, int which) -> float
        pc_input_buffers_full(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mpsk_preamble_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mpsk_preamble_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mpsk_preamble_cc_sptr self, int which) -> float
        pc_output_buffers_full(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mpsk_preamble_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mpsk_preamble_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mpsk_preamble_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mpsk_preamble_cc_sptr self)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mpsk_preamble_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mpsk_preamble_cc_sptr self, int priority) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mpsk_preamble_cc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mpsk_preamble_cc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mpsk_preamble_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mpsk_preamble_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mpsk_preamble_cc_sptr self) -> long"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mpsk_preamble_cc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mpsk_preamble_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mpsk_preamble_cc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mpsk_preamble_cc_sptr self, std::string name)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mpsk_preamble_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mpsk_preamble_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mpsk_preamble_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mpsk_preamble_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_message_subscribers(self, *args, **kwargs)

mpsk_preamble_cc_sptr_swigregister = _ccsds_swig.mpsk_preamble_cc_sptr_swigregister
mpsk_preamble_cc_sptr_swigregister(mpsk_preamble_cc_sptr)

mpsk_preamble_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mpsk_preamble_cc = mpsk_preamble_cc.make;

class softbittobit(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> softbittobit_sptr

        Return a shared_ptr to a new instance of ccsds::softbittobit.

        To avoid accidental use of raw pointers, ccsds::softbittobit's constructor is in a private implementation class. ccsds::softbittobit::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _ccsds_swig.softbittobit_make()

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_softbittobit
    __del__ = lambda self : None;
softbittobit_swigregister = _ccsds_swig.softbittobit_swigregister
softbittobit_swigregister(softbittobit)

def softbittobit_make():
  """
    softbittobit_make() -> softbittobit_sptr

    Return a shared_ptr to a new instance of ccsds::softbittobit.

    To avoid accidental use of raw pointers, ccsds::softbittobit's constructor is in a private implementation class. ccsds::softbittobit::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _ccsds_swig.softbittobit_make()

class softbittobit_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::softbittobit)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::softbittobit)> self) -> softbittobit_sptr
        __init__(boost::shared_ptr<(gr::ccsds::softbittobit)> self, softbittobit p) -> softbittobit_sptr
        """
        this = _ccsds_swig.new_softbittobit_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(softbittobit_sptr self) -> softbittobit"""
        return _ccsds_swig.softbittobit_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_softbittobit_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(softbittobit_sptr self) -> softbittobit_sptr

        Return a shared_ptr to a new instance of ccsds::softbittobit.

        To avoid accidental use of raw pointers, ccsds::softbittobit's constructor is in a private implementation class. ccsds::softbittobit::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _ccsds_swig.softbittobit_sptr_make(self)

    def history(self):
        """history(softbittobit_sptr self) -> unsigned int"""
        return _ccsds_swig.softbittobit_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(softbittobit_sptr self, int which, int delay)
        declare_sample_delay(softbittobit_sptr self, unsigned int delay)
        """
        return _ccsds_swig.softbittobit_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(softbittobit_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.softbittobit_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(softbittobit_sptr self) -> double"""
        return _ccsds_swig.softbittobit_sptr_relative_rate(self)

    def start(self):
        """start(softbittobit_sptr self) -> bool"""
        return _ccsds_swig.softbittobit_sptr_start(self)

    def stop(self):
        """stop(softbittobit_sptr self) -> bool"""
        return _ccsds_swig.softbittobit_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(softbittobit_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.softbittobit_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(softbittobit_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.softbittobit_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(softbittobit_sptr self, int m)"""
        return _ccsds_swig.softbittobit_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(softbittobit_sptr self)"""
        return _ccsds_swig.softbittobit_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(softbittobit_sptr self) -> bool"""
        return _ccsds_swig.softbittobit_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(softbittobit_sptr self, int m)"""
        return _ccsds_swig.softbittobit_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(softbittobit_sptr self, int i) -> long"""
        return _ccsds_swig.softbittobit_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(softbittobit_sptr self, long max_output_buffer)
        set_max_output_buffer(softbittobit_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.softbittobit_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(softbittobit_sptr self, int i) -> long"""
        return _ccsds_swig.softbittobit_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(softbittobit_sptr self, long min_output_buffer)
        set_min_output_buffer(softbittobit_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.softbittobit_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(softbittobit_sptr self, int which) -> float
        pc_input_buffers_full(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(softbittobit_sptr self, int which) -> float
        pc_input_buffers_full_avg(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(softbittobit_sptr self, int which) -> float
        pc_input_buffers_full_var(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(softbittobit_sptr self, int which) -> float
        pc_output_buffers_full(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(softbittobit_sptr self, int which) -> float
        pc_output_buffers_full_avg(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(softbittobit_sptr self, int which) -> float
        pc_output_buffers_full_var(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(softbittobit_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.softbittobit_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(softbittobit_sptr self)"""
        return _ccsds_swig.softbittobit_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(softbittobit_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.softbittobit_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(softbittobit_sptr self, int priority) -> int"""
        return _ccsds_swig.softbittobit_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(softbittobit_sptr self) -> std::string"""
        return _ccsds_swig.softbittobit_sptr_name(self)

    def symbol_name(self):
        """symbol_name(softbittobit_sptr self) -> std::string"""
        return _ccsds_swig.softbittobit_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(softbittobit_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbittobit_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(softbittobit_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbittobit_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(softbittobit_sptr self) -> long"""
        return _ccsds_swig.softbittobit_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(softbittobit_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.softbittobit_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(softbittobit_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.softbittobit_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(softbittobit_sptr self) -> std::string"""
        return _ccsds_swig.softbittobit_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(softbittobit_sptr self, std::string name)"""
        return _ccsds_swig.softbittobit_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(softbittobit_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.softbittobit_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(softbittobit_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbittobit_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(softbittobit_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbittobit_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(softbittobit_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.softbittobit_sptr_message_subscribers(self, *args, **kwargs)

softbittobit_sptr_swigregister = _ccsds_swig.softbittobit_sptr_swigregister
softbittobit_sptr_swigregister(softbittobit_sptr)

softbittobit_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
softbittobit = softbittobit.make;

class simple_bpsk_SNR_qf(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t window_size) -> simple_bpsk_SNR_qf_sptr

        Return a shared_ptr to a new instance of ccsds::simple_bpsk_SNR_qf.

        To avoid accidental use of raw pointers, ccsds::simple_bpsk_SNR_qf's constructor is in a private implementation class. ccsds::simple_bpsk_SNR_qf::make is the public interface for creating new instances.

        Params: (window_size)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_make(*args, **kwargs)

    make = staticmethod(make)
    def SNR_real(self):
        """
        SNR_real(simple_bpsk_SNR_qf self) -> float

        Params: (NONE)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_SNR_real(self)

    def SNR_imag(self):
        """
        SNR_imag(simple_bpsk_SNR_qf self) -> float

        Params: (NONE)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_SNR_imag(self)

    def SNR_magn(self):
        """
        SNR_magn(simple_bpsk_SNR_qf self) -> float

        Params: (NONE)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_SNR_magn(self)

    def window_size(self):
        """
        window_size(simple_bpsk_SNR_qf self) -> int

        Params: (NONE)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_window_size(self)

    def set_window_size(self, *args, **kwargs):
        """
        set_window_size(simple_bpsk_SNR_qf self, int arg2)

        Params: ()
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_set_window_size(self, *args, **kwargs)

    __swig_destroy__ = _ccsds_swig.delete_simple_bpsk_SNR_qf
    __del__ = lambda self : None;
simple_bpsk_SNR_qf_swigregister = _ccsds_swig.simple_bpsk_SNR_qf_swigregister
simple_bpsk_SNR_qf_swigregister(simple_bpsk_SNR_qf)

def simple_bpsk_SNR_qf_make(*args, **kwargs):
  """
    simple_bpsk_SNR_qf_make(size_t window_size) -> simple_bpsk_SNR_qf_sptr

    Return a shared_ptr to a new instance of ccsds::simple_bpsk_SNR_qf.

    To avoid accidental use of raw pointers, ccsds::simple_bpsk_SNR_qf's constructor is in a private implementation class. ccsds::simple_bpsk_SNR_qf::make is the public interface for creating new instances.

    Params: (window_size)
    """
  return _ccsds_swig.simple_bpsk_SNR_qf_make(*args, **kwargs)

class simple_bpsk_SNR_qf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::simple_bpsk_SNR_qf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::simple_bpsk_SNR_qf)> self) -> simple_bpsk_SNR_qf_sptr
        __init__(boost::shared_ptr<(gr::ccsds::simple_bpsk_SNR_qf)> self, simple_bpsk_SNR_qf p) -> simple_bpsk_SNR_qf_sptr
        """
        this = _ccsds_swig.new_simple_bpsk_SNR_qf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(simple_bpsk_SNR_qf_sptr self) -> simple_bpsk_SNR_qf"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_simple_bpsk_SNR_qf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(simple_bpsk_SNR_qf_sptr self, size_t window_size) -> simple_bpsk_SNR_qf_sptr

        Return a shared_ptr to a new instance of ccsds::simple_bpsk_SNR_qf.

        To avoid accidental use of raw pointers, ccsds::simple_bpsk_SNR_qf's constructor is in a private implementation class. ccsds::simple_bpsk_SNR_qf::make is the public interface for creating new instances.

        Params: (window_size)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_make(self, *args, **kwargs)

    def SNR_real(self):
        """
        SNR_real(simple_bpsk_SNR_qf_sptr self) -> float

        Params: (NONE)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_SNR_real(self)

    def SNR_imag(self):
        """
        SNR_imag(simple_bpsk_SNR_qf_sptr self) -> float

        Params: (NONE)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_SNR_imag(self)

    def SNR_magn(self):
        """
        SNR_magn(simple_bpsk_SNR_qf_sptr self) -> float

        Params: (NONE)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_SNR_magn(self)

    def window_size(self):
        """
        window_size(simple_bpsk_SNR_qf_sptr self) -> int

        Params: (NONE)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_window_size(self)

    def set_window_size(self, *args, **kwargs):
        """
        set_window_size(simple_bpsk_SNR_qf_sptr self, int arg2)

        Params: ()
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_window_size(self, *args, **kwargs)

    def history(self):
        """history(simple_bpsk_SNR_qf_sptr self) -> unsigned int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(simple_bpsk_SNR_qf_sptr self, int which, int delay)
        declare_sample_delay(simple_bpsk_SNR_qf_sptr self, unsigned int delay)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(simple_bpsk_SNR_qf_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(simple_bpsk_SNR_qf_sptr self) -> double"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_relative_rate(self)

    def start(self):
        """start(simple_bpsk_SNR_qf_sptr self) -> bool"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_start(self)

    def stop(self):
        """stop(simple_bpsk_SNR_qf_sptr self) -> bool"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(simple_bpsk_SNR_qf_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(simple_bpsk_SNR_qf_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(simple_bpsk_SNR_qf_sptr self, int m)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(simple_bpsk_SNR_qf_sptr self)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(simple_bpsk_SNR_qf_sptr self) -> bool"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(simple_bpsk_SNR_qf_sptr self, int m)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(simple_bpsk_SNR_qf_sptr self, int i) -> long"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(simple_bpsk_SNR_qf_sptr self, long max_output_buffer)
        set_max_output_buffer(simple_bpsk_SNR_qf_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(simple_bpsk_SNR_qf_sptr self, int i) -> long"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(simple_bpsk_SNR_qf_sptr self, long min_output_buffer)
        set_min_output_buffer(simple_bpsk_SNR_qf_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_input_buffers_full(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_input_buffers_full_avg(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_input_buffers_full_var(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_output_buffers_full(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_output_buffers_full_avg(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_output_buffers_full_var(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(simple_bpsk_SNR_qf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(simple_bpsk_SNR_qf_sptr self)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(simple_bpsk_SNR_qf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(simple_bpsk_SNR_qf_sptr self, int priority) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(simple_bpsk_SNR_qf_sptr self) -> std::string"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(simple_bpsk_SNR_qf_sptr self) -> std::string"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(simple_bpsk_SNR_qf_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(simple_bpsk_SNR_qf_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(simple_bpsk_SNR_qf_sptr self) -> long"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(simple_bpsk_SNR_qf_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(simple_bpsk_SNR_qf_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(simple_bpsk_SNR_qf_sptr self) -> std::string"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(simple_bpsk_SNR_qf_sptr self, std::string name)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(simple_bpsk_SNR_qf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(simple_bpsk_SNR_qf_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(simple_bpsk_SNR_qf_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(simple_bpsk_SNR_qf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_message_subscribers(self, *args, **kwargs)

simple_bpsk_SNR_qf_sptr_swigregister = _ccsds_swig.simple_bpsk_SNR_qf_sptr_swigregister
simple_bpsk_SNR_qf_sptr_swigregister(simple_bpsk_SNR_qf_sptr)

simple_bpsk_SNR_qf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
simple_bpsk_SNR_qf = simple_bpsk_SNR_qf.make;

class discriminator(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int status, std::string frame) -> discriminator_sptr

        Return a shared_ptr to a new instance of ccsds::discriminator.

        To avoid accidental use of raw pointers, ccsds::discriminator's constructor is in a private implementation class. ccsds::discriminator::make is the public interface for creating new instances.

        Params: (status, frame)
        """
        return _ccsds_swig.discriminator_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_discriminator
    __del__ = lambda self : None;
discriminator_swigregister = _ccsds_swig.discriminator_swigregister
discriminator_swigregister(discriminator)

def discriminator_make(*args, **kwargs):
  """
    discriminator_make(int status, std::string frame) -> discriminator_sptr

    Return a shared_ptr to a new instance of ccsds::discriminator.

    To avoid accidental use of raw pointers, ccsds::discriminator's constructor is in a private implementation class. ccsds::discriminator::make is the public interface for creating new instances.

    Params: (status, frame)
    """
  return _ccsds_swig.discriminator_make(*args, **kwargs)

class discriminator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::discriminator)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ccsds::discriminator)> self) -> discriminator_sptr
        __init__(boost::shared_ptr<(gr::ccsds::discriminator)> self, discriminator p) -> discriminator_sptr
        """
        this = _ccsds_swig.new_discriminator_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(discriminator_sptr self) -> discriminator"""
        return _ccsds_swig.discriminator_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_discriminator_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(discriminator_sptr self, int status, std::string frame) -> discriminator_sptr

        Return a shared_ptr to a new instance of ccsds::discriminator.

        To avoid accidental use of raw pointers, ccsds::discriminator's constructor is in a private implementation class. ccsds::discriminator::make is the public interface for creating new instances.

        Params: (status, frame)
        """
        return _ccsds_swig.discriminator_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(discriminator_sptr self) -> unsigned int"""
        return _ccsds_swig.discriminator_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(discriminator_sptr self, int which, int delay)
        declare_sample_delay(discriminator_sptr self, unsigned int delay)
        """
        return _ccsds_swig.discriminator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(discriminator_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.discriminator_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(discriminator_sptr self) -> int"""
        return _ccsds_swig.discriminator_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(discriminator_sptr self) -> double"""
        return _ccsds_swig.discriminator_sptr_relative_rate(self)

    def start(self):
        """start(discriminator_sptr self) -> bool"""
        return _ccsds_swig.discriminator_sptr_start(self)

    def stop(self):
        """stop(discriminator_sptr self) -> bool"""
        return _ccsds_swig.discriminator_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(discriminator_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.discriminator_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(discriminator_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.discriminator_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(discriminator_sptr self) -> int"""
        return _ccsds_swig.discriminator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(discriminator_sptr self, int m)"""
        return _ccsds_swig.discriminator_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(discriminator_sptr self)"""
        return _ccsds_swig.discriminator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(discriminator_sptr self) -> bool"""
        return _ccsds_swig.discriminator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(discriminator_sptr self, int m)"""
        return _ccsds_swig.discriminator_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(discriminator_sptr self) -> int"""
        return _ccsds_swig.discriminator_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(discriminator_sptr self, int i) -> long"""
        return _ccsds_swig.discriminator_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(discriminator_sptr self, long max_output_buffer)
        set_max_output_buffer(discriminator_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.discriminator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(discriminator_sptr self, int i) -> long"""
        return _ccsds_swig.discriminator_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(discriminator_sptr self, long min_output_buffer)
        set_min_output_buffer(discriminator_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.discriminator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(discriminator_sptr self, int which) -> float
        pc_input_buffers_full(discriminator_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.discriminator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(discriminator_sptr self, int which) -> float
        pc_input_buffers_full_avg(discriminator_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.discriminator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(discriminator_sptr self, int which) -> float
        pc_input_buffers_full_var(discriminator_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.discriminator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(discriminator_sptr self, int which) -> float
        pc_output_buffers_full(discriminator_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.discriminator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(discriminator_sptr self, int which) -> float
        pc_output_buffers_full_avg(discriminator_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.discriminator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(discriminator_sptr self, int which) -> float
        pc_output_buffers_full_var(discriminator_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.discriminator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(discriminator_sptr self) -> float"""
        return _ccsds_swig.discriminator_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(discriminator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.discriminator_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(discriminator_sptr self)"""
        return _ccsds_swig.discriminator_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(discriminator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.discriminator_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(discriminator_sptr self) -> int"""
        return _ccsds_swig.discriminator_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(discriminator_sptr self) -> int"""
        return _ccsds_swig.discriminator_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(discriminator_sptr self, int priority) -> int"""
        return _ccsds_swig.discriminator_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(discriminator_sptr self) -> std::string"""
        return _ccsds_swig.discriminator_sptr_name(self)

    def symbol_name(self):
        """symbol_name(discriminator_sptr self) -> std::string"""
        return _ccsds_swig.discriminator_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(discriminator_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.discriminator_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(discriminator_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.discriminator_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(discriminator_sptr self) -> long"""
        return _ccsds_swig.discriminator_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(discriminator_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.discriminator_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(discriminator_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.discriminator_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(discriminator_sptr self) -> std::string"""
        return _ccsds_swig.discriminator_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(discriminator_sptr self, std::string name)"""
        return _ccsds_swig.discriminator_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(discriminator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.discriminator_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(discriminator_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.discriminator_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(discriminator_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.discriminator_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(discriminator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.discriminator_sptr_message_subscribers(self, *args, **kwargs)

discriminator_sptr_swigregister = _ccsds_swig.discriminator_sptr_swigregister
discriminator_sptr_swigregister(discriminator_sptr)

discriminator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
discriminator = discriminator.make;




/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(asm_header.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(691bf106b7a8d2a5ae12c7c68d5ed43e)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/ccsds/asm_header.h>
// pydoc.h is automatically generated in the build directory
#include <asm_header_pydoc.h>

void bind_asm_header(py::module& m)
{

    using asm_header = ::gr::ccsds::asm_header;


    py::class_<asm_header, std::shared_ptr<asm_header>>(m, "asm_header", D(asm_header))

        .def(py::init<>(), D(asm_header, asm_header, 0))
        .def(py::init<uint64_t,
                      size_t,
                      float,
                      float,
                      bool,
                      gr::ccsds::snr_interpolation,
                      uint64_t>(),
             py::arg("offset"),
             py::arg("ambiguity"),
             py::arg("score"),
             py::arg("correlation"),
             py::arg("primary"),
             py::arg("snr"),
             py::arg("sequence_number") = gr::ccsds::asm_header::SEQUENCE_UNUSED,
             D(asm_header, asm_header, 1))
        .def(py::init<gr::ccsds::asm_header const&>(),
             py::arg("arg0"),
             D(asm_header, asm_header, 2))


        .def("offset", &asm_header::offset, D(asm_header, offset))


        .def("ambiguity", &asm_header::ambiguity, D(asm_header, ambiguity))


        .def("score", &asm_header::score, D(asm_header, score))


        .def("correlation", &asm_header::correlation, D(asm_header, correlation))


        .def("primary", &asm_header::primary, D(asm_header, primary))


        .def("hasSequence", &asm_header::hasSequence, D(asm_header, hasSequence))


        .def("sequence", &asm_header::sequence, D(asm_header, sequence))


        .def("snr", &asm_header::snr, D(asm_header, snr))


        .def("set_primary",
             &asm_header::set_primary,
             py::arg("primary"),
             D(asm_header, set_primary))


        .def("set_sequence",
             &asm_header::set_sequence,
             py::arg("sequence"),
             D(asm_header, set_sequence))


        .def("generate_header",
             &asm_header::generate_header,
             py::arg("bits_per_symbol"),
             py::arg("block_len_symbols"),
             py::arg("old_header") = pmt::make_dict(),
             D(asm_header, generate_header))

        ;
}

/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(snr_interpolation.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(589a7b67543c4d2134f830321178bc44)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/ccsds/snr_interpolation.h>
// pydoc.h is automatically generated in the build directory
#include <snr_interpolation_pydoc.h>

void bind_snr_interpolation(py::module& m)
{

    using snr_interpolation = ::gr::ccsds::snr_interpolation;


    py::class_<snr_interpolation, std::shared_ptr<snr_interpolation>>(
        m, "snr_interpolation", D(snr_interpolation))

        .def(py::init<>(), D(snr_interpolation, snr_interpolation, 0))
        .def(py::init<gr::ccsds::snr const&, gr::ccsds::snr const&, uint64_t, size_t>(),
             py::arg("start"),
             py::arg("end"),
             py::arg("offset_start"),
             py::arg("block_length"),
             D(snr_interpolation, snr_interpolation, 1))
        .def(py::init<gr::ccsds::snr_interpolation const&>(),
             py::arg("other"),
             D(snr_interpolation, snr_interpolation, 2))
        .def(py::init<gr::ccsds::snr_interpolation const&, size_t>(),
             py::arg("other"),
             py::arg("shift"),
             D(snr_interpolation, snr_interpolation, 3))


        .def("getFractionAbs",
             &snr_interpolation::getFractionAbs,
             py::arg("pos"),
             D(snr_interpolation, getFractionAbs))


        .def("getFractionWindow",
             &snr_interpolation::getFractionWindow,
             py::arg("pos"),
             D(snr_interpolation, getFractionWindow))


        .def("Es", &snr_interpolation::Es, py::arg("pos"), D(snr_interpolation, Es))


        .def("sqrtEs",
             &snr_interpolation::sqrtEs,
             py::arg("pos"),
             D(snr_interpolation, sqrtEs))


        .def("N0", &snr_interpolation::N0, py::arg("pos"), D(snr_interpolation, N0))


        .def("SNR_dB",
             &snr_interpolation::SNR_dB,
             py::arg("pos"),
             D(snr_interpolation, SNR_dB))


        .def("Es_window",
             &snr_interpolation::Es_window,
             py::arg("pos"),
             D(snr_interpolation, Es_window))


        .def("sqrtEs_window",
             &snr_interpolation::sqrtEs_window,
             py::arg("pos"),
             D(snr_interpolation, sqrtEs_window))


        .def("N0_window",
             &snr_interpolation::N0_window,
             py::arg("pos"),
             D(snr_interpolation, N0_window))


        .def("SNR_dB_window",
             &snr_interpolation::SNR_dB_window,
             py::arg("pos"),
             D(snr_interpolation, SNR_dB_window))


        .def("Es_start", &snr_interpolation::Es_start, D(snr_interpolation, Es_start))


        .def("Es_slope", &snr_interpolation::Es_slope, D(snr_interpolation, Es_slope))


        .def("sqrtEs_start",
             &snr_interpolation::sqrtEs_start,
             D(snr_interpolation, sqrtEs_start))


        .def("sqrtEs_slope",
             &snr_interpolation::sqrtEs_slope,
             D(snr_interpolation, sqrtEs_slope))


        .def("N0_start", &snr_interpolation::N0_start, D(snr_interpolation, N0_start))


        .def("N0_slope", &snr_interpolation::N0_slope, D(snr_interpolation, N0_slope))


        .def("SNR_dB_start",
             &snr_interpolation::SNR_dB_start,
             D(snr_interpolation, SNR_dB_start))


        .def("valid", &snr_interpolation::valid, D(snr_interpolation, valid))


        .def("offset", &snr_interpolation::offset, D(snr_interpolation, offset))


        .def("block_length",
             &snr_interpolation::block_length,
             D(snr_interpolation, block_length))


        .def("block_length_scale",
             &snr_interpolation::block_length_scale,
             D(snr_interpolation, block_length_scale))

        ;
}

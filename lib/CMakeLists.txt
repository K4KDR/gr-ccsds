# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-ccsds
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX
list(APPEND ccsds_sources
	sgp4/sgp4ext.cpp
	sgp4/sgp4unit.cpp
	sgp4/sgp4tle.cpp
	orbit_aux.cc
	orbit_range_interp.cc
	asynchronous_start.cc
	add_asm_impl.cc
	msg_null_src_impl.cc
	trunk_tail_impl.cc
	lpf2.cc
	pll_cc_impl.cc
	dll_cc_impl.cc
	blob_msg_sink_b_impl.cc
	blob_msg_source_b_impl.cc
	softbit_msg_sink_f_impl.cc
	softbit_msg_source_f_impl.cc
	softbits_msg_to_bytes_b_impl.cc
	rs_encode_impl.cc
	rs_decode_impl.cc
	mpsk_ambiguity_resolver_f_impl.cc
	conv_decode27_impl.cc
	reversebits_impl.cc
	mpsk_mod_bc_impl.cc
	mpsk_detector_soft_cf_impl.cc
	conv_encode27_bb_impl.cc
	conv_encode27_aux.cc
	mpsk_preamble_cc_impl.cc
	randomiser_impl.cc
	randomiser_softbits_impl.cc
	softbittobit_impl.cc
	ldpc_encoder_impl.cc
	ldpc_decoder_impl.cc
	message_info_impl.cc
	soft_to_hard_message_impl.cc
	doppler_correction_cc_impl.cc
	tag_storage_impl.cc
	constellation_ccsds_bpsk.cc
	constellation_ccsds_qpsk.cc
	constellation_ccsds_qpsk_axis.cc
	frame_sync_config_impl.cc
	frame_generation_config_impl.cc
	frame_sync_impl.cc
	frame_sync_buffer.cc
	asm_header.cc
	snr.cc
	snr_interpolation.cc
	snr_est.cc
	asm_position.cc
	pack_bit_to_bytes_impl.cc
	block_prefix_bb_impl.cc
	byte_to_softbits_bf_impl.cc
	sort_frames_impl.cc
	snr_estimation_cf_impl.cc
)

set(ccsds_sources "${ccsds_sources}" PARENT_SCOPE)
if(NOT ccsds_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT ccsds_sources)

########################################################################
# Declare third party dependencies
########################################################################
include(ccsdsAddDependency)

option(CCSDS_BUILD_DEPS "Download and build external dependencies (default value for all dependencies, can be overridden by CCSDS_DEPS_<COMPONENT>=On/Off)" On)

if(CCSDS_BUILD_DEPS)
    message(STATUS "CCSDS_BUILD_DEPS is enabled")
    message(STATUS "  Dependencies will be download from git submodules and be build along gr-ccsds")
    message(STATUS "  Disable automatic download and building")
    message(STATUS "    for all components with -DCCSDS_BUILD_DEPS=Off")
    message(STATUS "    for individual components with -DCCSDS_DEPS_<COMPONENT>=Off")
else()
    message(STATUS "CCSDS_BUILD_DEPS is disabled.")
    message(STATUS "  All dependencies must be installed to the system prior to running CMake.")
    message(STATUS "  Enable automatic download and building")
    message(STATUS "    for all dependencies with -DCCSDS_BUILD_DEPS=On")
    message(STATUS "    for individual components with -DCCSDS_DEPS_<COMPONENT>=On")
endif()

ccsds_add_dependency(
    NAME "fec"
    DESCRIPTION "Phil Karn's (ka9q) fec library"
    DEFAULT_VALUE ${CCSDS_BUILD_DEPS}
)

ccsds_add_dependency(
    NAME "ldpc"
    DESCRIPTION "LDPC library"
    DEFAULT_VALUE ${CCSDS_BUILD_DEPS}
)

set(FMT_INSTALL ON CACHE BOOL "Install {fmt}")
set(FMT_TEST OFF CACHE BOOL "Disable testing for {fmt}")
set(FMT_FUZZ OFF CACHE BOOL "Disable fuzzing for {fmt}")
set(FMT_CUDA_TEST OFF CACHE BOOL "Disable CUDA testing for {fmt}")
ccsds_add_dependency(
    NAME "fmt"
    DESCRIPTION "{fmt} library"
    DEFAULT_VALUE ${CCSDS_BUILD_DEPS}
)


########################################################################
# Create library and set properties
########################################################################

add_library(gnuradio-ccsds SHARED ${ccsds_sources})
target_link_libraries(gnuradio-ccsds 
    PUBLIC gnuradio::gnuradio-runtime gnuradio::gnuradio-digital fec::fec ldpc::ldpc
    PRIVATE fmt::fmt
)
target_include_directories(gnuradio-ccsds
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
  )
set_target_properties(gnuradio-ccsds PROPERTIES DEFINE_SYMBOL "gnuradio_ccsds_EXPORTS")
#target_compile_features(gnuradio-ccsds PRIVATE cxx_generalized_initializers)

if(APPLE)
    set_target_properties(gnuradio-ccsds PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

option(CCSDS_ENABLE_WARNINGS "Enable compiler warnings when building gnuradio-ccsds" Off)

if(CCSDS_ENABLE_WARNINGS)
    target_compile_options(gnuradio-ccsds
        PRIVATE
            $<$<OR:$<C_COMPILER_ID:Clang>,$<C_COMPILER_ID:AppleClang>,$<C_COMPILER_ID:GNU>>:
                -Werror -pedantic-errors -Wall -Wextra -Wconversion -Wsign-conversion -Wuseless-cast>
            $<$<C_COMPILER_ID:MSVC>:
                /WX /W4>
    )
endif()


########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-ccsds)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here
list(APPEND test_ccsds_sources
#    test_ccsds.cc
#    qa_ccsds.cc
#    qa_conv_encode27_aux.cc
#    conv_encode27_aux.cc
#    qa_orbit_aux.cc
#    orbit_aux.cc
#    orbit_range_interp.cc
#    qa_orbit_range_interp.cc
#    sgp4/sgp4ext.cpp
#    sgp4/sgp4unit.cpp
#    sgp4/sgp4tle.cpp
#    constellation_ccsds_bpsk.cc
#    constellation_ccsds_qpsk.cc
#    qa_constellation_ccsds_bpsk.cc
#    qa_constellation_ccsds_qpsk.cc
#    qa_constellation_ccsds_qpsk_axis.cc
#    frame_sync_buffer.cc
#    qa_frame_sync_buffer.cc
#    qa_frame_sync_config.cc
#    qa_softbits.cc
#    qa_utils.cc
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-ccsds ${CPPUNIT_LIBRARIES} fmt::fmt)

if(NOT test_ccsds_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_ccsds_sources)

foreach(qa_file ${test_ccsds_sources})
    GR_ADD_CPP_TEST("ccsds_${qa_file}"
        ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file}
    )
endforeach(qa_file)

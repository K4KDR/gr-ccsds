<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classlpf" kind="class" prot="public">
    <compoundname>lpf</compoundname>
    <includes refid="ccsds__lpf_8h" local="no">ccsds_lpf.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlpf_1ae0086d5722f10a75f88b53d4654e6a1e" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double lpf::ALPHA</definition>
        <argsstring></argsstring>
        <name>ALPHA</name>
        <briefdescription>
<para>Loop stepsize alpha. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="ccsds__lpf_8h_1ab52f34dd4c355289f36e323a9d443e04" kindref="member">ccsds_make_lpf()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="37" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf_1a417c20aa6aea80d402be1001a1980bfc" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lpf::ALPHAB</definition>
        <argsstring></argsstring>
        <name>ALPHAB</name>
        <briefdescription>
<para>Precalculated expression for (1-ALPHA). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classlpf_1ae0086d5722f10a75f88b53d4654e6a1e" kindref="member">lpf::ALPHA</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="43" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf_1af2948926e86ae2edc25627722590287b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lpf::d_state</definition>
        <argsstring></argsstring>
        <name>d_state</name>
        <briefdescription>
<para>Filtered state variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="46" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf_1aec25f81f5b475f5e759903af438ee257" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lpf::d_state_init</definition>
        <argsstring></argsstring>
        <name>d_state_init</name>
        <briefdescription>
<para>Flag is filter already contains a value. </para>        </briefdescription>
        <detaileddescription>
<para>If false <ref refid="classlpf_1af2948926e86ae2edc25627722590287b" kindref="member">lpf::d_state</ref> is initialized with the first input. If true input will be filtered. This way a constant input <emphasis>c</emphasis> will result in a filtered value of <emphasis>c</emphasis> and not growing from zero to <emphasis>c</emphasis> first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="54" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlpf_1ab52f34dd4c355289f36e323a9d443e04" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classlpf" kindref="compound">lpf</ref> *</type>
        <definition>lpf* ccsds_make_lpf</definition>
        <argsstring>(float loop_bw)</argsstring>
        <name>ccsds_make_lpf</name>
        <param>
          <type>float</type>
          <declname>loop_bw</declname>
        </param>
        <briefdescription>
<para>Create a linear first order low pass filter and return it&apos;s shared pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loop_bw</parametername>
</parameternamelist>
<parameterdescription>
<para>Bandwidth of the loop, which determins the loop stepsize. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shared pointer to the created filter.</para></simplesect>
Based on the loop bandwidth the filter stepsize alpha is calculated with: [<ref refid="page_bibliography_1bib_mengali" kindref="member">Mengali &amp; D&apos;Andrea</ref> p. 126 (3.5.67)] <programlisting><codeline><highlight class="normal">alpha<sp/>=<sp/>4<sp/>*<sp/>loop_bw<sp/></highlight></codeline>
</programlisting></para><para>The k-th filtered state x from the inputs y is calculated as <programlisting><codeline><highlight class="normal">x[k]<sp/>=<sp/>(1-alpha)<sp/>*<sp/>x[k-1]<sp/>+<sp/>alpha<sp/>*<sp/>y[k]<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="31" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlpf_1a72e4d707d7d0be483b329592310bdde7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lpf::lpf</definition>
        <argsstring>(float alpha)</argsstring>
        <name>lpf</name>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Private constructor of <ref refid="classlpf" kindref="compound">lpf</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Loop stepsize.</para></parameterdescription>
</parameteritem>
</parameterlist>
Constructs a linear first order low pass filter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf_1ad830fdbdffa46d1a7b105b6499423c70" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double lpf::filter_step</definition>
        <argsstring>(double in)</argsstring>
        <name>filter_step</name>
        <param>
          <type>double</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Calculate next state based on single input. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that should be filtered.</para></parameterdescription>
</parameteritem>
</parameterlist>
Next state is calculated by <programlisting><codeline><highlight class="normal"><ref refid="classlpf_1af2948926e86ae2edc25627722590287b" kindref="member">d_state</ref><sp/>=<sp/><ref refid="classlpf_1a417c20aa6aea80d402be1001a1980bfc" kindref="member">ALPHAB</ref><sp/>*<sp/><ref refid="classlpf_1af2948926e86ae2edc25627722590287b" kindref="member">d_state</ref><sp/>+<sp/><ref refid="classlpf_1ae0086d5722f10a75f88b53d4654e6a1e" kindref="member">ALPHA</ref><sp/>*<sp/>in<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="76" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlpf_1a3bae18c937db7cdf6265bf3711bcc62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lpf::~lpf</definition>
        <argsstring>()</argsstring>
        <name>~lpf</name>
        <briefdescription>
<para>Public deconstructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf_1a5543f91eda92b1fcbb3d112ab5af2e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lpf::filter</definition>
        <argsstring>(double *out, float *in, const unsigned int n)</argsstring>
        <name>filter</name>
        <param>
          <type>double *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Filter elements of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to store the filtered values. Memory for at least <computeroutput>n</computeroutput> elements must be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values that should be filtered. Must contain at least <computeroutput>n</computeroutput> elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to filter.</para></parameterdescription>
</parameteritem>
</parameterlist>
Call <ref refid="classlpf_1ad830fdbdffa46d1a7b105b6499423c70" kindref="member">filter_step()</ref> for each element of <computeroutput>in</computeroutput> and put output in <computeroutput>out</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf_1a5e498b35e10d9fc794532bbd4265b9d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lpf::filter</definition>
        <argsstring>(float *out, float *in, const unsigned int n)</argsstring>
        <name>filter</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Filter elements of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to store the filtered values. Memory for at least <computeroutput>n</computeroutput> elements must be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values that should be filtered. Must contain at least <computeroutput>n</computeroutput> elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to filter.</para></parameterdescription>
</parameteritem>
</parameterlist>
Call <ref refid="classlpf_1ad830fdbdffa46d1a7b105b6499423c70" kindref="member">filter_step()</ref> for each element of <computeroutput>in</computeroutput>, cast result to float and put it in <computeroutput>out</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="106" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Linear first order low pass filter. </para>    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000015"><xreftitle>Todo</xreftitle><xrefdescription><para>put <ref refid="group__filter" kindref="compound">CCSDS filter blocks</ref> into ccsds_ name schema. </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" line="28" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf.h" bodystart="27" bodyend="107"/>
    <listofallmembers>
      <member refid="classlpf_1ae0086d5722f10a75f88b53d4654e6a1e" prot="private" virt="non-virtual"><scope>lpf</scope><name>ALPHA</name></member>
      <member refid="classlpf_1a417c20aa6aea80d402be1001a1980bfc" prot="private" virt="non-virtual"><scope>lpf</scope><name>ALPHAB</name></member>
      <member refid="classlpf_1ab52f34dd4c355289f36e323a9d443e04" prot="private" virt="non-virtual"><scope>lpf</scope><name>ccsds_make_lpf</name></member>
      <member refid="classlpf_1af2948926e86ae2edc25627722590287b" prot="private" virt="non-virtual"><scope>lpf</scope><name>d_state</name></member>
      <member refid="classlpf_1aec25f81f5b475f5e759903af438ee257" prot="private" virt="non-virtual"><scope>lpf</scope><name>d_state_init</name></member>
      <member refid="classlpf_1a5543f91eda92b1fcbb3d112ab5af2e41" prot="public" virt="non-virtual"><scope>lpf</scope><name>filter</name></member>
      <member refid="classlpf_1a5e498b35e10d9fc794532bbd4265b9d7" prot="public" virt="non-virtual"><scope>lpf</scope><name>filter</name></member>
      <member refid="classlpf_1ad830fdbdffa46d1a7b105b6499423c70" prot="private" virt="non-virtual"><scope>lpf</scope><name>filter_step</name></member>
      <member refid="classlpf_1a72e4d707d7d0be483b329592310bdde7" prot="private" virt="non-virtual"><scope>lpf</scope><name>lpf</name></member>
      <member refid="classlpf_1a3bae18c937db7cdf6265bf3711bcc62e" prot="public" virt="non-virtual"><scope>lpf</scope><name>~lpf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

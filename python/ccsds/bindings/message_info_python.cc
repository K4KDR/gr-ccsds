/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(message_info.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(9540b6f71ba662fbb252ca9afc33fb26)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/ccsds/message_info.h>
// pydoc.h is automatically generated in the build directory
#include <message_info_pydoc.h>

void bind_message_info(py::module& m)
{

    using message_info = ::gr::ccsds::message_info;


    py::class_<message_info,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<message_info>>(m, "message_info", D(message_info))

        .def(py::init(&message_info::make),
             py::arg("prefix"),
             py::arg("mode"),
             D(message_info, make))


        ;

    py::enum_<::gr::ccsds::mode_t>(m, "mode_t")
        .value("MESSAGE_INFO_SILENT", ::gr::ccsds::mode_t::MESSAGE_INFO_SILENT)   // 0
        .value("MESSAGE_INFO_COMPACT", ::gr::ccsds::mode_t::MESSAGE_INFO_COMPACT) // 10
        .value("MESSAGE_INFO_HEADER_ONLY",
               ::gr::ccsds::mode_t::MESSAGE_INFO_HEADER_ONLY)               // 15
        .value("MESSAGE_INFO_FULL", ::gr::ccsds::mode_t::MESSAGE_INFO_FULL) // 20
        .export_values();

    py::implicitly_convertible<int, ::gr::ccsds::mode_t>();
}

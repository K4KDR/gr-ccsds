<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="ccsds__lpf2_8h" kind="file">
    <compoundname>ccsds_lpf2.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includedby refid="ccsds__pll__cc_8h" local="no">ccsds_pll_cc.h</includedby>
    <incdepgraph>
      <node id="264">
        <label>ccsds_lpf2.h</label>
        <link refid="ccsds_lpf2.h"/>
        <childnode refid="265" relation="include">
        </childnode>
      </node>
      <node id="265">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="267">
        <label>ccsds_pll_cc.h</label>
        <link refid="ccsds__pll__cc_8h"/>
      </node>
      <node id="266">
        <label>ccsds_lpf2.h</label>
        <link refid="ccsds_lpf2.h"/>
        <childnode refid="267" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classlpf2" prot="public">lpf2</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="ccsds__lpf2_8h_1aa54f27bf92c65d6cdf3cb504ab38e650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlpf2" kindref="compound">lpf2</ref> *</type>
        <definition>lpf2* ccsds_make_lpf2</definition>
        <argsstring>(const double loop_bw, const double damping_factor_squared, const double s_slope)</argsstring>
        <name>ccsds_make_lpf2</name>
        <param>
          <type>const double</type>
          <declname>loop_bw</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>damping_factor_squared</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>s_slope</declname>
        </param>
        <briefdescription>
<para>Create a linear second order low pass filter and return it&apos;s shared pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loop_bw</parametername>
</parameternamelist>
<parameterdescription>
<para>Bandwidth of the loop. Used to compute the loop stepsizes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>damping_factor_squared</parametername>
</parameternamelist>
<parameterdescription>
<para>Squared value of the loop&apos;s damping factor. Used to compute the loop stepsizes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_slope</parametername>
</parameternamelist>
<parameterdescription>
<para>Estimated slope of the S-curve of the error detector at the origin. Used to compute the loop stepsizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shared pointer of the created filter.</para></simplesect>
The loop stepsizes gamma and rho are given by the following formulas: [<ref refid="page_bibliography_1bib_mengali" kindref="member">Mengali &amp; D&apos;Andrea</ref> p. 220 ff.] <programlisting><codeline><highlight class="normal">loop_bw<sp/>=<sp/>(<sp/>2*rho<sp/>+<sp/>gamma*s_slope*(2+rho)<sp/>)<sp/>/<sp/>(<sp/>8<sp/>-<sp/>2*gamma*s_slope*(2+rho)<sp/>)<sp/><sp/>(5.3.92)</highlight></codeline>
<codeline><highlight class="normal">damping_factor<sp/>=<sp/>(<sp/>(1+rho)*sqrt(gamma*s_slope)<sp/>)<sp/>/<sp/>(<sp/>2*sqrt(rho))<sp/><sp/>(5.3.86)</highlight></codeline>
</programlisting></para><para>The stepsize rho can not be computed in explicit form and is computed with Newton&apos;s method by solving the root of the following polynomial: <programlisting><codeline><highlight class="normal">f(rho)<sp/>=<sp/>rho^3<sp/>+<sp/>a<sp/>*<sp/>rho^2<sp/>+<sp/>b<sp/>*<sp/>rho<sp/>+<sp/>c<sp/>!=<sp/>0<sp/></highlight></codeline>
</programlisting> with <programlisting><codeline><highlight class="normal">a<sp/>=<sp/>-<sp/>4*loop_bw<sp/>+<sp/>4*loop_bw*damping_factor_squared<sp/>+<sp/>2<sp/>+<sp/>2*damping_factor_squared</highlight></codeline>
<codeline><highlight class="normal">b<sp/>=<sp/>-<sp/>8*loop_bw<sp/>+<sp/>8*loop_bw*damping_factor_squared<sp/>+<sp/>1<sp/>+<sp/>4*damping_factor_squared</highlight></codeline>
<codeline><highlight class="normal">c<sp/>=<sp/>-<sp/>4*loop_bw</highlight></codeline>
</programlisting></para><para>Given rho, gamma is computed in closed form as <programlisting><codeline><highlight class="normal">gamma<sp/>=<sp/>(<sp/>4*damping_factor_squared*rho<sp/>)<sp/>/<sp/>(<sp/>s_slope<sp/>*<sp/>(1+rho)^2<sp/>)<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ccsds__lpf2_8h_1a9e549cea4357af232f9978582715de22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlpf2" kindref="compound">lpf2</ref> *</type>
        <definition>lpf2* ccsds_make_lpf2</definition>
        <argsstring>(double loop_bw)</argsstring>
        <name>ccsds_make_lpf2</name>
        <param>
          <type>double</type>
          <declname>loop_bw</declname>
        </param>
        <briefdescription>
<para>Creates a linear second order low pass filter and return it&apos;s shared pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loop_bw</parametername>
</parameternamelist>
<parameterdescription>
<para>Bandwidth of the loop. Used to calculate loop stepsizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shared pointer of the created filter. </para></simplesect>
<simplesect kind="see"><para><ref refid="ccsds__lpf2_8h_1aa54f27bf92c65d6cdf3cb504ab38e650" kindref="member">ccsds_make_lpf2(const double loop_bw, const double damping_factor_squared, const double s_slope)</ref></para></simplesect>
Call to <ref refid="ccsds__lpf2_8h_1aa54f27bf92c65d6cdf3cb504ab38e650" kindref="member">ccsds_make_lpf2(const double loop_bw, const double damping_factor_squared, const double s_slope)</ref> with the given loop bandwidth, a damping factor of sqrt(0.5) (critically damped) and a S-curve slope of 1.0 (assuming the error detector is an unscaled and unbiased estimator). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="52" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h"/>
  </compounddef>
</doxygen>

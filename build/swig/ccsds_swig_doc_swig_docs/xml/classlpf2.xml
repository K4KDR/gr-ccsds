<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classlpf2" kind="class" prot="public">
    <compoundname>lpf2</compoundname>
    <includes refid="ccsds__lpf2_8h" local="no">ccsds_lpf2.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlpf2_1a8234443140799440468658caef725ab1" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double lpf2::RHO</definition>
        <argsstring></argsstring>
        <name>RHO</name>
        <briefdescription>
<para>Loop stepsize rho. </para>        </briefdescription>
        <detaileddescription>
<para>Computed by <ref refid="classlpf2_1aa54f27bf92c65d6cdf3cb504ab38e650" kindref="member">ccsds_make_lpf2()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="67" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf2_1a5209bbe5160018a2b9ec9111f144c729" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double lpf2::GAMMA</definition>
        <argsstring></argsstring>
        <name>GAMMA</name>
        <briefdescription>
<para>Loop stepsize rho. </para>        </briefdescription>
        <detaileddescription>
<para>Computed by <ref refid="classlpf2_1aa54f27bf92c65d6cdf3cb504ab38e650" kindref="member">ccsds_make_lpf2()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="73" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf2_1abbe869d9017de8427e96a6ea9956ef32" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double lpf2::RHOB</definition>
        <argsstring></argsstring>
        <name>RHOB</name>
        <briefdescription>
<para>Loop stepsize (1+rho). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="76" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf2_1a4c3268ac3844d56e102f632936bb31f6" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lpf2::d_phi</definition>
        <argsstring></argsstring>
        <name>d_phi</name>
        <briefdescription>
<para>State variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="79" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf2_1a53a2fd0b60236f3e6c16ae771374d853" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lpf2::d_xi</definition>
        <argsstring></argsstring>
        <name>d_xi</name>
        <briefdescription>
<para>State variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="82" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf2_1a969900b67227499b246406f712fe4d7c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lpf2::d_ephi</definition>
        <argsstring></argsstring>
        <name>d_ephi</name>
        <briefdescription>
<para>Auxilliary state variable. </para>        </briefdescription>
        <detaileddescription>
<para>Store the difference values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="88" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf2_1af0fec71f7c064fe2bb065461ae4943b8" prot="private" static="no" mutable="no">
        <type>FILE *</type>
        <definition>FILE* lpf2::debugFile</definition>
        <argsstring></argsstring>
        <name>debugFile</name>
        <briefdescription>
<para>File pointer for debugging. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="91" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlpf2_1ae706d885a2097660d4cde3be974c7ac9" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int lpf2::debug_count</definition>
        <argsstring></argsstring>
        <name>debug_count</name>
        <briefdescription>
<para>Counter for debugging. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="94" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlpf2_1aa54f27bf92c65d6cdf3cb504ab38e650" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classlpf2" kindref="compound">lpf2</ref> *</type>
        <definition>lpf2* ccsds_make_lpf2</definition>
        <argsstring>(const double loop_bw, const double damping_factor_squared, const double s_slope)</argsstring>
        <name>ccsds_make_lpf2</name>
        <param>
          <type>const double</type>
          <declname>loop_bw</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>damping_factor_squared</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>s_slope</declname>
        </param>
        <briefdescription>
<para>Create a linear second order low pass filter and return it&apos;s shared pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loop_bw</parametername>
</parameternamelist>
<parameterdescription>
<para>Bandwidth of the loop. Used to compute the loop stepsizes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>damping_factor_squared</parametername>
</parameternamelist>
<parameterdescription>
<para>Squared value of the loop&apos;s damping factor. Used to compute the loop stepsizes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_slope</parametername>
</parameternamelist>
<parameterdescription>
<para>Estimated slope of the S-curve of the error detector at the origin. Used to compute the loop stepsizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shared pointer of the created filter.</para></simplesect>
The loop stepsizes gamma and rho are given by the following formulas: [<ref refid="page_bibliography_1bib_mengali" kindref="member">Mengali &amp; D&apos;Andrea</ref> p. 220 ff.] <programlisting><codeline><highlight class="normal">loop_bw<sp/>=<sp/>(<sp/>2*rho<sp/>+<sp/>gamma*s_slope*(2+rho)<sp/>)<sp/>/<sp/>(<sp/>8<sp/>-<sp/>2*gamma*s_slope*(2+rho)<sp/>)<sp/><sp/>(5.3.92)</highlight></codeline>
<codeline><highlight class="normal">damping_factor<sp/>=<sp/>(<sp/>(1+rho)*sqrt(gamma*s_slope)<sp/>)<sp/>/<sp/>(<sp/>2*sqrt(rho))<sp/><sp/>(5.3.86)</highlight></codeline>
</programlisting></para><para>The stepsize rho can not be computed in explicit form and is computed with Newton&apos;s method by solving the root of the following polynomial: <programlisting><codeline><highlight class="normal">f(rho)<sp/>=<sp/>rho^3<sp/>+<sp/>a<sp/>*<sp/>rho^2<sp/>+<sp/>b<sp/>*<sp/>rho<sp/>+<sp/>c<sp/>!=<sp/>0<sp/></highlight></codeline>
</programlisting> with <programlisting><codeline><highlight class="normal">a<sp/>=<sp/>-<sp/>4*loop_bw<sp/>+<sp/>4*loop_bw*damping_factor_squared<sp/>+<sp/>2<sp/>+<sp/>2*damping_factor_squared</highlight></codeline>
<codeline><highlight class="normal">b<sp/>=<sp/>-<sp/>8*loop_bw<sp/>+<sp/>8*loop_bw*damping_factor_squared<sp/>+<sp/>1<sp/>+<sp/>4*damping_factor_squared</highlight></codeline>
<codeline><highlight class="normal">c<sp/>=<sp/>-<sp/>4*loop_bw</highlight></codeline>
</programlisting></para><para>Given rho, gamma is computed in closed form as <programlisting><codeline><highlight class="normal">gamma<sp/>=<sp/>(<sp/>4*damping_factor_squared*rho<sp/>)<sp/>/<sp/>(<sp/>s_slope<sp/>*<sp/>(1+rho)^2<sp/>)<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlpf2_1a0dc8f26650c4be0dc2088b2bab47f694" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lpf2::lpf2</definition>
        <argsstring>(double gamma, double rho)</argsstring>
        <name>lpf2</name>
        <param>
          <type>double</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <briefdescription>
<para>Private constructor of the linear second order low pass filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>General loop stepsize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>Differential loop stepsize. Set to zero for a first order filter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classlpf2_1aa54f27bf92c65d6cdf3cb504ab38e650" kindref="member">ccsds_make_lpf2(const double loop_bw, const double damping_factor_squared, const double s_slope)</ref></para></simplesect>
Loop stepsizes are derived from the more intuitive parameters loop bandwidth, damping factor and S-curve slope in <ref refid="classlpf2_1aa54f27bf92c65d6cdf3cb504ab38e650" kindref="member">ccsds_make_lpf2()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf2_1a0362849a04653c631b9a1a16bf427a9a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float lpf2::wrap</definition>
        <argsstring>(float in, float max)</argsstring>
        <name>wrap</name>
        <param>
          <type>float</type>
          <declname>in</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Wrap value centered arround zero to given bounds. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Vaue to be wrapped. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>upper bound to wrap arround.</para></parameterdescription>
</parameteritem>
</parameterlist>
Wraps <computeroutput>in</computeroutput> to lie in the interval (-max,max].</para><para>Most prominent usecase is to wrap a phase <emphasis>phi</emphasis> to be contained in the interval between -pi and pi. This could be achieved by: <programlisting><codeline><highlight class="normal">wrap(phi,<sp/>pi);<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf2_1a0a258b8a1757b3ac53f264358bb5b8be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double lpf2::filter_step</definition>
        <argsstring>(float in)</argsstring>
        <name>filter_step</name>
        <param>
          <type>float</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Update filtered state from a single input. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be filtered.</para></parameterdescription>
</parameteritem>
</parameterlist>
<image type="html" name="lpf2_filter_step.png">Block diagram of the <computeroutput>filter_step</computeroutput>() function</image>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf2_1ab7fb69d87f56d7baf0ec58b9ffcda587" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double lpf2::filter_step_wrapped</definition>
        <argsstring>(float in, float wrap_max)</argsstring>
        <name>filter_step_wrapped</name>
        <param>
          <type>float</type>
          <declname>in</declname>
        </param>
        <param>
          <type>float</type>
          <declname>wrap_max</declname>
        </param>
        <briefdescription>
<para>Update filtered state from a single input. And keep state variables contained in a fixed interval. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be filtered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrap_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Bound arround which the input value is wrapped.</para></parameterdescription>
</parameteritem>
</parameterlist>
<image type="html" name="lpf2_filter_step_wrapped.png">Block diagram of the <computeroutput>filter_step_wrapped</computeroutput>() function</image>
 <simplesect kind="see"><para>wrap() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="141" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlpf2_1aef2286580d74ff662de0f648d816a9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lpf2::~lpf2</definition>
        <argsstring>()</argsstring>
        <name>~lpf2</name>
        <briefdescription>
<para>Public deconstructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf2_1ae2b031c19a79269b8b2c6daa495ad5ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lpf2::filter</definition>
        <argsstring>(float *values, const unsigned int n)</argsstring>
        <name>filter</name>
        <param>
          <type>float *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Filter elements of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values that should be filtered. Must contain at least <computeroutput>n</computeroutput> elements. Filtered results are written back into this array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to filter.</para></parameterdescription>
</parameteritem>
</parameterlist>
Call filter_step() for each element of <computeroutput>value</computeroutput> and put restul in <computeroutput>out</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf2_1a9852101a905cb511292929f753d598e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lpf2::filter</definition>
        <argsstring>(float *out, const float *in, const unsigned int n)</argsstring>
        <name>filter</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Filter elements of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to store the filtered values. Memory for at least <computeroutput>n</computeroutput> elements must be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values that should be filtered. Must contain at least <computeroutput>n</computeroutput> elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to filter.</para></parameterdescription>
</parameteritem>
</parameterlist>
Call filter_step() for each element of <computeroutput>value</computeroutput> and put result back into <computeroutput>value</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf2_1ae40be2df18542b71f3497e71e7767b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lpf2::filter</definition>
        <argsstring>(double *out, const float *in, const unsigned int n)</argsstring>
        <name>filter</name>
        <param>
          <type>double *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Filter elements of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to store the filtered values. Memory for at least <computeroutput>n</computeroutput> elements must be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values that should be filtered. Must contain at least <computeroutput>n</computeroutput> elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to filter.</para></parameterdescription>
</parameteritem>
</parameterlist>
Call filter_step() for each element of <computeroutput>in</computeroutput> and put result in <computeroutput>out</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf2_1aca209c7b1fb4bfb893d034b0d7bb835c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lpf2::filter_wrapped</definition>
        <argsstring>(float *values, float *freq_est, float wrap_max, const unsigned int n)</argsstring>
        <name>filter_wrapped</name>
        <param>
          <type>float *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>freq_est</declname>
        </param>
        <param>
          <type>float</type>
          <declname>wrap_max</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Filter elements of an array and keep state variables contained. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values that should be filtered. Must contain at least <computeroutput>n</computeroutput> elements. Filtered results are written back into this array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freq_est</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to store frequency estimates in. Memory for at least <computeroutput>n</computeroutput> elements must be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrap_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound to wrap input arround. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to filter.</para></parameterdescription>
</parameteritem>
</parameterlist>
Call filter_step_wrapped() for each element of <computeroutput>value</computeroutput> and put result back into <computeroutput>value</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlpf2_1a4a399e3f6f13657fd3b05aed37416a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double lpf2::get_freq_estimate</definition>
        <argsstring>(void)</argsstring>
        <name>get_freq_estimate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return current difference state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current difference state lpf2::d_xi</para></simplesect>
When filtering carrier phase estimates with this filter, the current difference state acts as a frequency estimate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="209" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Linear second order low pass filter. </para>    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000017"><xreftitle>Todo</xreftitle><xrefdescription><para>Put filter into ccsds_ naming scheme </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" line="59" column="1" bodyfile="/home/marina/Documents/sdr1/gr-ccsds/gr-ccsds/include/ccsds_lpf2.h" bodystart="58" bodyend="211"/>
    <listofallmembers>
      <member refid="classlpf2_1aa54f27bf92c65d6cdf3cb504ab38e650" prot="private" virt="non-virtual"><scope>lpf2</scope><name>ccsds_make_lpf2</name></member>
      <member refid="classlpf2_1a969900b67227499b246406f712fe4d7c" prot="private" virt="non-virtual"><scope>lpf2</scope><name>d_ephi</name></member>
      <member refid="classlpf2_1a4c3268ac3844d56e102f632936bb31f6" prot="private" virt="non-virtual"><scope>lpf2</scope><name>d_phi</name></member>
      <member refid="classlpf2_1a53a2fd0b60236f3e6c16ae771374d853" prot="private" virt="non-virtual"><scope>lpf2</scope><name>d_xi</name></member>
      <member refid="classlpf2_1ae706d885a2097660d4cde3be974c7ac9" prot="private" virt="non-virtual"><scope>lpf2</scope><name>debug_count</name></member>
      <member refid="classlpf2_1af0fec71f7c064fe2bb065461ae4943b8" prot="private" virt="non-virtual"><scope>lpf2</scope><name>debugFile</name></member>
      <member refid="classlpf2_1ae2b031c19a79269b8b2c6daa495ad5ca" prot="public" virt="non-virtual"><scope>lpf2</scope><name>filter</name></member>
      <member refid="classlpf2_1a9852101a905cb511292929f753d598e1" prot="public" virt="non-virtual"><scope>lpf2</scope><name>filter</name></member>
      <member refid="classlpf2_1ae40be2df18542b71f3497e71e7767b13" prot="public" virt="non-virtual"><scope>lpf2</scope><name>filter</name></member>
      <member refid="classlpf2_1a0a258b8a1757b3ac53f264358bb5b8be" prot="private" virt="non-virtual"><scope>lpf2</scope><name>filter_step</name></member>
      <member refid="classlpf2_1ab7fb69d87f56d7baf0ec58b9ffcda587" prot="private" virt="non-virtual"><scope>lpf2</scope><name>filter_step_wrapped</name></member>
      <member refid="classlpf2_1aca209c7b1fb4bfb893d034b0d7bb835c" prot="public" virt="non-virtual"><scope>lpf2</scope><name>filter_wrapped</name></member>
      <member refid="classlpf2_1a5209bbe5160018a2b9ec9111f144c729" prot="private" virt="non-virtual"><scope>lpf2</scope><name>GAMMA</name></member>
      <member refid="classlpf2_1a4a399e3f6f13657fd3b05aed37416a7c" prot="public" virt="non-virtual"><scope>lpf2</scope><name>get_freq_estimate</name></member>
      <member refid="classlpf2_1a0dc8f26650c4be0dc2088b2bab47f694" prot="private" virt="non-virtual"><scope>lpf2</scope><name>lpf2</name></member>
      <member refid="classlpf2_1a8234443140799440468658caef725ab1" prot="private" virt="non-virtual"><scope>lpf2</scope><name>RHO</name></member>
      <member refid="classlpf2_1abbe869d9017de8427e96a6ea9956ef32" prot="private" virt="non-virtual"><scope>lpf2</scope><name>RHOB</name></member>
      <member refid="classlpf2_1a0362849a04653c631b9a1a16bf427a9a" prot="private" virt="non-virtual"><scope>lpf2</scope><name>wrap</name></member>
      <member refid="classlpf2_1aef2286580d74ff662de0f648d816a9f4" prot="public" virt="non-virtual"><scope>lpf2</scope><name>~lpf2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

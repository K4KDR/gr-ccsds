/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(asm_position.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(b82281662f7f519d6775f93e15ce264b)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/ccsds/asm_position.h>
// pydoc.h is automatically generated in the build directory
#include <asm_position_pydoc.h>

void bind_asm_position(py::module& m)
{

    using asm_position = ::gr::ccsds::asm_position;
    using asm_position_list = ::gr::ccsds::asm_position_list;


    py::class_<asm_position, std::shared_ptr<asm_position>>(
        m, "asm_position", D(asm_position))

        .def(py::init<uint64_t, size_t, size_t>(),
             py::arg("offset"),
             py::arg("ambiguity"),
             py::arg("sequence_number") = gr::ccsds::asm_header::SEQUENCE_UNUSED,
             D(asm_position, asm_position, 0))
        .def(py::init<gr::ccsds::asm_position const&>(),
             py::arg("arg0"),
             D(asm_position, asm_position, 1))


        .def("offset", &asm_position::offset, D(asm_position, offset))


        .def("ambiguity", &asm_position::ambiguity, D(asm_position, ambiguity))


        .def("sequence", &asm_position::sequence, D(asm_position, sequence))


        .def("set_offset",
             &asm_position::set_offset,
             py::arg("offset"),
             D(asm_position, set_offset))


        .def("set_ambiguity",
             &asm_position::set_ambiguity,
             py::arg("ambiguity"),
             D(asm_position, set_ambiguity))


        .def("set_sequence",
             &asm_position::set_sequence,
             py::arg("sequence") = gr::ccsds::asm_header::SEQUENCE_UNUSED,
             D(asm_position, set_sequence))


        .def("hasSequence", &asm_position::hasSequence, D(asm_position, hasSequence))


        ;


    py::class_<asm_position_list, std::shared_ptr<asm_position_list>>(
        m, "asm_position_list", D(asm_position_list))

        .def("elements", &asm_position_list::elements, D(asm_position_list, elements))


        .def("to_string", &asm_position_list::to_string, D(asm_position_list, to_string))


        ;
}

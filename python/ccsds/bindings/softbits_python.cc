/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(softbits.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(b9ae84709e378761d00f7ecc0cfb2bd7)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/ccsds/softbits.h>
// pydoc.h is automatically generated in the build directory
#include <softbits_pydoc.h>

void bind_softbits(py::module& m)
{

    using softbits = ::gr::ccsds::softbits;


    py::class_<softbits, std::shared_ptr<softbits>>(m, "softbits", D(softbits))

        .def(py::init<>(), D(softbits, softbits, 0))
        .def(py::init<gr::ccsds::softbits const&>(),
             py::arg("arg0"),
             D(softbits, softbits, 1))


        .def_static("probability_one",
                    &softbits::probability_one,
                    py::arg("llr_one"),
                    D(softbits, probability_one))


        .def_static("probability_zero",
                    &softbits::probability_zero,
                    py::arg("llr_one"),
                    D(softbits, probability_zero))


        .def_static("floor_to", &softbits::floor_to, py::arg("in"), D(softbits, floor_to))


        .def_static("map_to_uint8",
                    &softbits::map_to_uint8,
                    py::arg("llr_one"),
                    D(softbits, map_to_uint8))


        .def_static("create_from_sample",
                    &softbits::create_from_sample,
                    py::arg("symbol"),
                    py::arg("noise_power") = 0.00100000005F,
                    D(softbits, create_from_sample))


        .def_static("create_from_bit",
                    &softbits::create_from_bit,
                    py::arg("bit"),
                    py::arg("noise_power"),
                    D(softbits, create_from_bit))

        ;
}
